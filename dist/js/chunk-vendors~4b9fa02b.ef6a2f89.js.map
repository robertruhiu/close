{"version":3,"sources":["webpack:///./node_modules/lodash/_equalByTag.js"],"names":["Symbol","__webpack_require__","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","name","message","convert","isPartial","size","stacked","get","set","result","call","module","exports"],"mappings":"6GAAA,IAAAA,EAAaC,EAAQ,QACrBC,EAAiBD,EAAQ,QACzBE,EAASF,EAAQ,QACjBG,EAAkBH,EAAQ,QAC1BI,EAAiBJ,EAAQ,QACzBK,EAAiBL,EAAQ,QAGzBM,EAAA,EACAC,EAAA,EAGAC,EAAA,mBACAC,EAAA,gBACAC,EAAA,iBACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBAEAC,EAAA,uBACAC,EAAA,oBAGAC,EAAApB,IAAAqB,eAAAC,EACAC,EAAAH,IAAAI,aAAAF,EAmBA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAJ,GACA,KAAAT,EACA,GAAAO,EAAAO,YAAAN,EAAAM,YACAP,EAAAQ,YAAAP,EAAAO,WACA,SAEAR,IAAAS,OACAR,IAAAQ,OAEA,KAAAjB,EACA,QAAAQ,EAAAO,YAAAN,EAAAM,aACAF,EAAA,IAAA7B,EAAAwB,GAAA,IAAAxB,EAAAyB,KAKA,KAAAlB,EACA,KAAAC,EACA,KAAAG,EAGA,OAAAV,GAAAuB,GAAAC,GAEA,KAAAhB,EACA,OAAAe,EAAAU,MAAAT,EAAAS,MAAAV,EAAAW,SAAAV,EAAAU,QAEA,KAAAvB,EACA,KAAAE,EAIA,OAAAU,GAAAC,EAAA,GAEA,KAAAf,EACA,IAAA0B,EAAAjC,EAEA,KAAAU,EACA,IAAAwB,EAAAV,EAAAtB,EAGA,GAFA+B,MAAAhC,GAEAoB,EAAAc,MAAAb,EAAAa,OAAAD,EACA,SAGA,IAAAE,EAAAT,EAAAU,IAAAhB,GACA,GAAAe,EACA,OAAAA,GAAAd,EAEAE,GAAArB,EAGAwB,EAAAW,IAAAjB,EAAAC,GACA,IAAAiB,EAAAxC,EAAAkC,EAAAZ,GAAAY,EAAAX,GAAAE,EAAAC,EAAAC,EAAAC,GAEA,OADAA,EAAA,UAAAN,GACAkB,EAEA,KAAA3B,EACA,GAAAM,EACA,OAAAA,EAAAsB,KAAAnB,IAAAH,EAAAsB,KAAAlB,GAGA,SAGAmB,EAAAC,QAAAtB","file":"js/chunk-vendors~4b9fa02b.ef6a2f89.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"],"sourceRoot":""}