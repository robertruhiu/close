{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/menu/index.js"],"names":["babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default","omit_js__WEBPACK_IMPORTED_MODULE_3__","_vc_menu__WEBPACK_IMPORTED_MODULE_4__","_vc_menu__WEBPACK_IMPORTED_MODULE_5__","_vc_menu__WEBPACK_IMPORTED_MODULE_6__","_vc_menu__WEBPACK_IMPORTED_MODULE_7__","_util_vue_types__WEBPACK_IMPORTED_MODULE_8__","_util_openAnimation__WEBPACK_IMPORTED_MODULE_9__","_util_warning__WEBPACK_IMPORTED_MODULE_10__","_MenuItem__WEBPACK_IMPORTED_MODULE_11__","_util_props_util__WEBPACK_IMPORTED_MODULE_12__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_13__","_vc_menu_commonPropsType__WEBPACK_IMPORTED_MODULE_14__","MenuMode","oneOf","menuProps","theme","def","mode","selectable","bool","selectedKeys","arrayOf","oneOfType","string","number","defaultSelectedKeys","array","openKeys","defaultOpenKeys","openAnimation","object","openTransitionName","prefixCls","multiple","inlineIndent","inlineCollapsed","isRootMenu","focusable","Menu","name","props","Divider","Item","SubMenu","ItemGroup","provide","getInlineCollapsed","this","mixins","inject","layoutSiderContext","default","configProvider","model","prop","event","created","preProps","$props","updated","propsUpdating","watch","val","oldVal","switchingModeFromInline","setState","sOpenKeys","collapsedChange","layoutSiderContext.sCollapsed","data","Object","leaveAnimationExecutedWhenInlineCollapsed","inlineOpenKeys","methods","restoreModeVerticalFromInline","$forceUpdate","handleMouseEnter","e","$emit","handleTransitionEnd","widthCollapsed","propertyName","target","currentTarget","iconScaled","className","indexOf","handleClick","handleOpenChange","handleSelect","info","handleDeselect","setOpenKeys","getRealMenuMode","undefined","sCollapsed","getMenuOpenAnimation","menuMode","_$props","menuOpenAnimation","on","render","_menuClassName","_this","h","arguments","$slots","$listeners","collapsedWidth","getContextPopupContainer","getPopupContainer","_$props2","menuClassName","select","deselect","openChange","onMouseenter","nativeOn","transitionend","click","class","install","Vue","component","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~e5e3cb4f.ca4e1b82.js","sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport omit from 'omit.js';\nimport VcMenu, { Divider, ItemGroup, SubMenu } from '../vc-menu';\nimport PropTypes from '../_util/vue-types';\nimport animation from '../_util/openAnimation';\nimport warning from '../_util/warning';\nimport Item from './MenuItem';\nimport { hasProp } from '../_util/props-util';\nimport BaseMixin from '../_util/BaseMixin';\nimport commonPropsType from '../vc-menu/commonPropsType';\n\nexport var MenuMode = PropTypes.oneOf(['vertical', 'vertical-left', 'vertical-right', 'horizontal', 'inline']);\n\nexport var menuProps = _extends({}, commonPropsType, {\n  theme: PropTypes.oneOf(['light', 'dark']).def('light'),\n  mode: MenuMode.def('vertical'),\n  selectable: PropTypes.bool,\n  selectedKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  defaultSelectedKeys: PropTypes.array,\n  openKeys: PropTypes.array,\n  defaultOpenKeys: PropTypes.array,\n  openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  openTransitionName: PropTypes.string,\n  prefixCls: PropTypes.string.def('ant-menu'),\n  multiple: PropTypes.bool,\n  inlineIndent: PropTypes.number.def(24),\n  inlineCollapsed: PropTypes.bool,\n  isRootMenu: PropTypes.bool.def(true),\n  focusable: PropTypes.bool.def(false)\n});\n\nvar Menu = {\n  name: 'AMenu',\n  props: menuProps,\n  Divider: _extends({}, Divider, { name: 'AMenuDivider' }),\n  Item: _extends({}, Item, { name: 'AMenuItem' }),\n  SubMenu: _extends({}, SubMenu, { name: 'ASubMenu' }),\n  ItemGroup: _extends({}, ItemGroup, { name: 'AMenuItemGroup' }),\n  provide: function provide() {\n    return {\n      getInlineCollapsed: this.getInlineCollapsed\n    };\n  },\n\n  mixins: [BaseMixin],\n  inject: {\n    layoutSiderContext: { 'default': function _default() {\n        return {};\n      } },\n    configProvider: { 'default': function _default() {\n        return {};\n      } }\n  },\n  model: {\n    prop: 'selectedKeys',\n    event: 'selectChange'\n  },\n  created: function created() {\n    this.preProps = _extends({}, this.$props);\n  },\n  updated: function updated() {\n    this.propsUpdating = false;\n  },\n\n  watch: {\n    mode: function mode(val, oldVal) {\n      if (oldVal === 'inline' && val !== 'inline') {\n        this.switchingModeFromInline = true;\n      }\n    },\n    openKeys: function openKeys(val) {\n      this.setState({ sOpenKeys: val });\n    },\n    inlineCollapsed: function inlineCollapsed(val) {\n      this.collapsedChange(val);\n    },\n\n    'layoutSiderContext.sCollapsed': function layoutSiderContextSCollapsed(val) {\n      this.collapsedChange(val);\n    }\n  },\n  data: function data() {\n    var props = this.$props;\n    warning(!(hasProp(this, 'inlineCollapsed') && props.mode !== 'inline'), \"`inlineCollapsed` should only be used when Menu's `mode` is inline.\");\n    this.switchingModeFromInline = false;\n    this.leaveAnimationExecutedWhenInlineCollapsed = false;\n    this.inlineOpenKeys = [];\n    var sOpenKeys = void 0;\n\n    if (hasProp(this, 'openKeys')) {\n      sOpenKeys = props.openKeys;\n    } else if (hasProp(this, 'defaultOpenKeys')) {\n      sOpenKeys = props.defaultOpenKeys;\n    }\n    return {\n      sOpenKeys: sOpenKeys\n    };\n  },\n\n  methods: {\n    collapsedChange: function collapsedChange(val) {\n      if (this.propsUpdating) {\n        return;\n      }\n      this.propsUpdating = true;\n      if (!hasProp(this, 'openKeys')) {\n        if (val) {\n          this.switchingModeFromInline = true;\n          this.inlineOpenKeys = this.sOpenKeys;\n          this.setState({ sOpenKeys: [] });\n        } else {\n          this.setState({ sOpenKeys: this.inlineOpenKeys });\n          this.inlineOpenKeys = [];\n        }\n      } else if (val) {\n        // 缩起时，openKeys置为空的动画会闪动，react可以通过是否传递openKeys避免闪动，vue不是很方便动态传递openKeys\n        this.switchingModeFromInline = true;\n      }\n    },\n    restoreModeVerticalFromInline: function restoreModeVerticalFromInline() {\n      if (this.switchingModeFromInline) {\n        this.switchingModeFromInline = false;\n        this.$forceUpdate();\n      }\n    },\n\n    // Restore vertical mode when menu is collapsed responsively when mounted\n    // https://github.com/ant-design/ant-design/issues/13104\n    // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n    handleMouseEnter: function handleMouseEnter(e) {\n      this.restoreModeVerticalFromInline();\n      this.$emit('mouseenter', e);\n    },\n    handleTransitionEnd: function handleTransitionEnd(e) {\n      // when inlineCollapsed menu width animation finished\n      // https://github.com/ant-design/ant-design/issues/12864\n      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget;\n      // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n      // https://github.com/ant-design/ant-design-pro/issues/2783\n      var iconScaled = e.propertyName === 'font-size' && e.target.className.indexOf('anticon') >= 0;\n      if (widthCollapsed || iconScaled) {\n        this.restoreModeVerticalFromInline();\n      }\n    },\n    handleClick: function handleClick(e) {\n      this.handleOpenChange([]);\n      this.$emit('click', e);\n    },\n    handleSelect: function handleSelect(info) {\n      this.$emit('select', info);\n      this.$emit('selectChange', info.selectedKeys);\n    },\n    handleDeselect: function handleDeselect(info) {\n      this.$emit('deselect', info);\n      this.$emit('selectChange', info.selectedKeys);\n    },\n    handleOpenChange: function handleOpenChange(openKeys) {\n      this.setOpenKeys(openKeys);\n      this.$emit('openChange', openKeys);\n      this.$emit('update:openKeys', openKeys);\n    },\n    setOpenKeys: function setOpenKeys(openKeys) {\n      if (!hasProp(this, 'openKeys')) {\n        this.setState({ sOpenKeys: openKeys });\n      }\n    },\n    getRealMenuMode: function getRealMenuMode() {\n      var inlineCollapsed = this.getInlineCollapsed();\n      if (this.switchingModeFromInline && inlineCollapsed) {\n        return 'inline';\n      }\n      var mode = this.$props.mode;\n\n      return inlineCollapsed ? 'vertical' : mode;\n    },\n    getInlineCollapsed: function getInlineCollapsed() {\n      var inlineCollapsed = this.$props.inlineCollapsed;\n\n      if (this.layoutSiderContext.sCollapsed !== undefined) {\n        return this.layoutSiderContext.sCollapsed;\n      }\n      return inlineCollapsed;\n    },\n    getMenuOpenAnimation: function getMenuOpenAnimation(menuMode) {\n      var _$props = this.$props,\n          openAnimation = _$props.openAnimation,\n          openTransitionName = _$props.openTransitionName;\n\n      var menuOpenAnimation = openAnimation || openTransitionName;\n      if (openAnimation === undefined && openTransitionName === undefined) {\n        if (menuMode === 'horizontal') {\n          menuOpenAnimation = 'slide-up';\n        } else if (menuMode === 'inline') {\n          menuOpenAnimation = { on: animation };\n        } else {\n          // When mode switch from inline\n          // submenu should hide without animation\n          if (this.switchingModeFromInline) {\n            menuOpenAnimation = '';\n            this.switchingModeFromInline = false;\n          } else {\n            menuOpenAnimation = 'zoom-big';\n          }\n        }\n      }\n      return menuOpenAnimation;\n    }\n  },\n  render: function render() {\n    var _menuClassName,\n        _this = this;\n\n    var h = arguments[0];\n    var layoutSiderContext = this.layoutSiderContext,\n        $slots = this.$slots,\n        $listeners = this.$listeners;\n    var collapsedWidth = layoutSiderContext.collapsedWidth;\n    var getContextPopupContainer = this.configProvider.getPopupContainer;\n    var _$props2 = this.$props,\n        prefixCls = _$props2.prefixCls,\n        theme = _$props2.theme,\n        getPopupContainer = _$props2.getPopupContainer;\n\n    var menuMode = this.getRealMenuMode();\n    var menuOpenAnimation = this.getMenuOpenAnimation(menuMode);\n\n    var menuClassName = (_menuClassName = {}, _defineProperty(_menuClassName, prefixCls + '-' + theme, true), _defineProperty(_menuClassName, prefixCls + '-inline-collapsed', this.getInlineCollapsed()), _menuClassName);\n\n    var menuProps = {\n      props: _extends({}, omit(this.$props, ['inlineCollapsed']), {\n        getPopupContainer: getPopupContainer || getContextPopupContainer,\n        openKeys: this.sOpenKeys,\n        mode: menuMode\n      }),\n      on: _extends({}, $listeners, {\n        select: this.handleSelect,\n        deselect: this.handleDeselect,\n        openChange: this.handleOpenChange,\n        onMouseenter: this.handleMouseEnter\n      }),\n      nativeOn: {\n        transitionend: this.handleTransitionEnd\n      }\n    };\n    if (!hasProp(this, 'selectedKeys')) {\n      delete menuProps.props.selectedKeys;\n    }\n\n    if (menuMode !== 'inline') {\n      // closing vertical popup submenu after click it\n      menuProps.on.click = this.handleClick;\n      menuProps.props.openTransitionName = menuOpenAnimation;\n    } else {\n      menuProps.on.click = function (e) {\n        _this.$emit('click', e);\n      };\n      menuProps.props.openAnimation = menuOpenAnimation;\n    }\n\n    // https://github.com/ant-design/ant-design/issues/8587\n    if (this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')) {\n      return null;\n    }\n\n    return h(\n      VcMenu,\n      _mergeJSXProps([menuProps, { 'class': menuClassName }]),\n      [$slots['default']]\n    );\n  }\n};\n\n/* istanbul ignore next */\nMenu.install = function (Vue) {\n  Vue.component(Menu.name, Menu);\n  Vue.component(Menu.Item.name, Menu.Item);\n  Vue.component(Menu.SubMenu.name, Menu.SubMenu);\n  Vue.component(Menu.Divider.name, Menu.Divider);\n  Vue.component(Menu.ItemGroup.name, Menu.ItemGroup);\n};\nexport default Menu;"],"sourceRoot":""}