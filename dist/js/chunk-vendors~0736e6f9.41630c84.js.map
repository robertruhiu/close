{"version":3,"sources":["webpack:///./node_modules/enquire.js/src/MediaQueryDispatch.js"],"names":["MediaQuery","__webpack_require__","Util","each","isFunction","isArray","MediaQueryDispatch","window","matchMedia","Error","this","queries","browserIsIncapable","matches","prototype","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear","module","exports"],"mappings":"2GAAA,IAAAA,EAAiBC,EAAQ,QACzBC,EAAWD,EAAQ,QACnBE,EAAAD,EAAAC,KACAC,EAAAF,EAAAE,WACAC,EAAAH,EAAAG,QAQA,SAAAC,IACA,IAAAC,OAAAC,WACA,UAAAC,MAAA,8DAGAC,KAAAC,QAAA,GACAD,KAAAE,oBAAAL,OAAAC,WAAA,YAAAK,QAGAP,EAAAQ,UAAA,CAEAC,YAAAT,EAaAU,SAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAR,EAAAD,KAAAC,QACAS,EAAAD,GAAAT,KAAAE,mBAoBA,OAlBAD,EAAAM,KACAN,EAAAM,GAAA,IAAAjB,EAAAiB,EAAAG,IAIAhB,EAAAc,KACAA,EAAA,CAAuBG,MAAAH,IAEvBb,EAAAa,KACAA,EAAA,CAAAA,IAEAf,EAAAe,EAAA,SAAAI,GACAlB,EAAAkB,KACAA,EAAA,CAA2BD,MAAAC,IAE3BX,EAAAM,GAAAM,WAAAD,KAGAZ,MASAc,WAAA,SAAAP,EAAAK,GACA,IAAAG,EAAAf,KAAAC,QAAAM,GAYA,OAVAQ,IACAH,EACAG,EAAAC,cAAAJ,IAGAG,EAAAE,eACAjB,KAAAC,QAAAM,KAIAP,OAIAkB,EAAAC,QAAAvB","file":"js/chunk-vendors~0736e6f9.41630c84.js","sourcesContent":["var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n"],"sourceRoot":""}