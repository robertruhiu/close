{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-table/src/ExpandableTable.js"],"names":["babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default","_util_vue_types__WEBPACK_IMPORTED_MODULE_2__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_3__","_util_store__WEBPACK_IMPORTED_MODULE_4__","shallowequal__WEBPACK_IMPORTED_MODULE_5__","shallowequal__WEBPACK_IMPORTED_MODULE_5___default","_TableRow__WEBPACK_IMPORTED_MODULE_6__","_utils__WEBPACK_IMPORTED_MODULE_7__","_util_props_util__WEBPACK_IMPORTED_MODULE_8__","ExpandableTableProps","expandIconAsCell","bool","expandRowByClick","expandedRowKeys","array","expandedRowClassName","func","defaultExpandAllRows","defaultExpandedRowKeys","expandIconColumnIndex","number","expandedRowRender","expandIcon","childrenColumnName","string","indentSize","columnManager","object","isRequired","store","prefixCls","data","getRowKey","ExpandableTable","name","mixins","props","Object","this","finnalExpandedRowKeys","rows","concat","i","length","row","push","setState","expandedRowsHeight","mounted","handleUpdated","updated","watch","val","_this","$nextTick","methods","latestExpandedRows","handleExpandChange","expanded","record","event","rowKey","destroy","arguments","undefined","preventDefault","stopPropagation","_store$getState","getState","expandedRowIndex","indexOf","__emit","renderExpandIndentCell","fixed","iconColumn","key","className","title","rowSpan","unshift","column","renderExpandedRow","index","ancestorKeys","indent","_this2","h","$createElement","parentKey","components","body","cell","colCount","leftLeafColumns","rightLeafColumns","leafColumns","columns","customRender","_store$getState2","attrs","colSpan","children","expandedRow","hasExpandIcon","class","renderRows","_renderRows","childrenData","nextAncestorKeys","nextIndent","apply","render","$scopedSlots","$listeners","needIndentSpaced","some","on","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~dd146a0e.14e8a176.js","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport PropTypes from '../../_util/vue-types';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { connect } from '../../_util/store';\nimport shallowEqual from 'shallowequal';\nimport TableRow from './TableRow';\nimport { remove } from './utils';\nimport { initDefaultProps, getOptionProps } from '../../_util/props-util';\n\nexport var ExpandableTableProps = function ExpandableTableProps() {\n  return {\n    expandIconAsCell: PropTypes.bool,\n    expandRowByClick: PropTypes.bool,\n    expandedRowKeys: PropTypes.array,\n    expandedRowClassName: PropTypes.func,\n    defaultExpandAllRows: PropTypes.bool,\n    defaultExpandedRowKeys: PropTypes.array,\n    expandIconColumnIndex: PropTypes.number,\n    expandedRowRender: PropTypes.func,\n    expandIcon: PropTypes.func,\n    childrenColumnName: PropTypes.string,\n    indentSize: PropTypes.number,\n    // onExpand: PropTypes.func,\n    // onExpandedRowsChange: PropTypes.func,\n    columnManager: PropTypes.object.isRequired,\n    store: PropTypes.object.isRequired,\n    prefixCls: PropTypes.string.isRequired,\n    data: PropTypes.array,\n    getRowKey: PropTypes.func\n  };\n};\n\nvar ExpandableTable = {\n  name: 'ExpandableTable',\n  mixins: [BaseMixin],\n  props: initDefaultProps(ExpandableTableProps(), {\n    expandIconAsCell: false,\n    expandedRowClassName: function expandedRowClassName() {\n      return '';\n    },\n    expandIconColumnIndex: 0,\n    defaultExpandAllRows: false,\n    defaultExpandedRowKeys: [],\n    childrenColumnName: 'children',\n    indentSize: 15\n  }),\n\n  data: function data() {\n    var data = this.data,\n        childrenColumnName = this.childrenColumnName,\n        defaultExpandAllRows = this.defaultExpandAllRows,\n        expandedRowKeys = this.expandedRowKeys,\n        defaultExpandedRowKeys = this.defaultExpandedRowKeys,\n        getRowKey = this.getRowKey;\n\n\n    var finnalExpandedRowKeys = [];\n    var rows = [].concat(_toConsumableArray(data));\n\n    if (defaultExpandAllRows) {\n      for (var i = 0; i < rows.length; i++) {\n        var row = rows[i];\n        finnalExpandedRowKeys.push(getRowKey(row, i));\n        rows = rows.concat(row[childrenColumnName] || []);\n      }\n    } else {\n      finnalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;\n    }\n\n    // this.columnManager = props.columnManager\n    // this.store = props.store\n\n    this.store.setState({\n      expandedRowsHeight: {},\n      expandedRowKeys: finnalExpandedRowKeys\n    });\n    return {};\n  },\n  mounted: function mounted() {\n    this.handleUpdated();\n  },\n  updated: function updated() {\n    this.handleUpdated();\n  },\n\n  watch: {\n    expandedRowKeys: function expandedRowKeys(val) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.store.setState({\n          expandedRowKeys: val\n        });\n      });\n    }\n  },\n  methods: {\n    handleUpdated: function handleUpdated() {\n      // We should record latest expanded rows to avoid multiple rows remove cause `onExpandedRowsChange` trigger many times\n      this.latestExpandedRows = null;\n    },\n    handleExpandChange: function handleExpandChange(expanded, record, event, rowKey) {\n      var destroy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      var _store$getState = this.store.getState(),\n          expandedRowKeys = _store$getState.expandedRowKeys;\n\n      if (expanded) {\n        // row was expaned\n        expandedRowKeys = [].concat(_toConsumableArray(expandedRowKeys), [rowKey]);\n      } else {\n        // row was collapse\n        var expandedRowIndex = expandedRowKeys.indexOf(rowKey);\n        if (expandedRowIndex !== -1) {\n          expandedRowKeys = remove(expandedRowKeys, rowKey);\n        }\n      }\n\n      if (!this.expandedRowKeys) {\n        this.store.setState({ expandedRowKeys: expandedRowKeys });\n      }\n      // De-dup of repeat call\n      if (!this.latestExpandedRows || !shallowEqual(this.latestExpandedRows, expandedRowKeys)) {\n        this.latestExpandedRows = expandedRowKeys;\n        this.__emit('expandedRowsChange', expandedRowKeys);\n      }\n\n      if (!destroy) {\n        this.__emit('expand', expanded, record);\n      }\n    },\n    renderExpandIndentCell: function renderExpandIndentCell(rows, fixed) {\n      var prefixCls = this.prefixCls,\n          expandIconAsCell = this.expandIconAsCell;\n\n      if (!expandIconAsCell || fixed === 'right' || !rows.length) {\n        return;\n      }\n\n      var iconColumn = {\n        key: 'rc-table-expand-icon-cell',\n        className: prefixCls + '-expand-icon-th',\n        title: '',\n        rowSpan: rows.length\n      };\n\n      rows[0].unshift(_extends({}, iconColumn, { column: iconColumn }));\n    },\n    renderExpandedRow: function renderExpandedRow(record, index, expandedRowRender, className, ancestorKeys, indent, fixed) {\n      var _this2 = this;\n\n      var h = this.$createElement;\n      var prefixCls = this.prefixCls,\n          expandIconAsCell = this.expandIconAsCell,\n          indentSize = this.indentSize;\n\n      var parentKey = ancestorKeys[ancestorKeys.length - 1];\n      var rowKey = parentKey + '-extra-row';\n      var components = {\n        body: {\n          row: 'tr',\n          cell: 'td'\n        }\n      };\n      var colCount = void 0;\n      if (fixed === 'left') {\n        colCount = this.columnManager.leftLeafColumns().length;\n      } else if (fixed === 'right') {\n        colCount = this.columnManager.rightLeafColumns().length;\n      } else {\n        colCount = this.columnManager.leafColumns().length;\n      }\n      var columns = [{\n        key: 'extra-row',\n        customRender: function customRender() {\n          var _store$getState2 = _this2.store.getState(),\n              expandedRowKeys = _store$getState2.expandedRowKeys;\n\n          var expanded = !!~expandedRowKeys.indexOf(parentKey);\n          return {\n            attrs: {\n              colSpan: colCount\n            },\n            children: fixed !== 'right' ? expandedRowRender(record, index, indent, expanded) : '&nbsp;'\n          };\n        }\n      }];\n      if (expandIconAsCell && fixed !== 'right') {\n        columns.unshift({\n          key: 'expand-icon-placeholder',\n          customRender: function customRender() {\n            return null;\n          }\n        });\n      }\n\n      return h(TableRow, {\n        key: rowKey,\n        attrs: { columns: columns,\n\n          rowKey: rowKey,\n          ancestorKeys: ancestorKeys,\n          prefixCls: prefixCls + '-expanded-row',\n          indentSize: indentSize,\n          indent: indent,\n          fixed: fixed,\n          components: components,\n          expandedRow: true,\n          hasExpandIcon: function hasExpandIcon() {}\n        },\n        'class': className });\n    },\n    renderRows: function renderRows(_renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) {\n      var expandedRowClassName = this.expandedRowClassName,\n          expandedRowRender = this.expandedRowRender,\n          childrenColumnName = this.childrenColumnName;\n\n      var childrenData = record[childrenColumnName];\n      var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);\n      var nextIndent = indent + 1;\n\n      if (expandedRowRender) {\n        rows.push(this.renderExpandedRow(record, index, expandedRowRender, expandedRowClassName(record, index, indent), nextAncestorKeys, nextIndent, fixed));\n      }\n\n      if (childrenData) {\n        rows.push.apply(rows, _toConsumableArray(_renderRows(childrenData, nextIndent, nextAncestorKeys)));\n      }\n    }\n  },\n\n  render: function render() {\n    var data = this.data,\n        childrenColumnName = this.childrenColumnName,\n        $scopedSlots = this.$scopedSlots,\n        $listeners = this.$listeners;\n\n    var props = getOptionProps(this);\n    var needIndentSpaced = data.some(function (record) {\n      return record[childrenColumnName];\n    });\n\n    return $scopedSlots['default'] && $scopedSlots['default']({\n      props: props,\n      on: $listeners,\n      needIndentSpaced: needIndentSpaced,\n      renderRows: this.renderRows,\n      handleExpandChange: this.handleExpandChange,\n      renderExpandIndentCell: this.renderExpandIndentCell\n    });\n  }\n};\n\nexport default connect()(ExpandableTable);"],"sourceRoot":""}