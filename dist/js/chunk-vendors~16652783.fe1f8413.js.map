{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/_util/vue-types/utils.js"],"names":["__webpack_require__","d","__webpack_exports__","getType","isInteger","isArray","isFunction","toType","validateType","warn","lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0__","lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0___default","n","ObjProto","Object","prototype","toString","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","fn","type","undefined","match","getNativeType","value","constructor","noop","Number","isFinite","Math","floor","Array","call","withDefault","defineProperty","def","this","_vueTypes_name","enumerable","writable","withRequired","get","required","name","obj","validator","bind","silent","arguments","length","typeToCheck","valid","expectedType","namePrefix","some","map","join"],"mappings":"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","file":"js/chunk-vendors~16652783.fe1f8413.js","sourcesContent":["import isPlainObject from 'lodash/isPlainObject';\n\nvar ObjProto = Object.prototype;\nvar toString = ObjProto.toString;\nexport var hasOwn = ObjProto.hasOwnProperty;\n\nvar FN_MATCH_REGEXP = /^\\s*function (\\w+)/;\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L159\nexport var getType = function getType(fn) {\n  var type = fn !== null && fn !== undefined ? fn.type ? fn.type : fn : null;\n  var match = type && type.toString().match(FN_MATCH_REGEXP);\n  return match && match[1];\n};\n\nexport var getNativeType = function getNativeType(value) {\n  if (value === null || value === undefined) return null;\n  var match = value.constructor.toString().match(FN_MATCH_REGEXP);\n  return match && match[1];\n};\n\n/**\n * No-op function\n */\nexport var noop = function noop() {};\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport var has = function has(obj, prop) {\n  return hasOwn.call(obj, prop);\n};\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport var isInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport var isArray = Array.isArray || function (value) {\n  return toString.call(value) === '[object Array]';\n};\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\nexport var isFunction = function isFunction(value) {\n  return toString.call(value) === '[object Function]';\n};\n\n/**\n * Adds a `def` method to the object returning a new object with passed in argument as `default` property\n *\n * @param {object} type - Object to enhance\n */\nexport var withDefault = function withDefault(type) {\n  Object.defineProperty(type, 'def', {\n    value: function value(def) {\n      if (def === undefined && this['default'] === undefined) {\n        this['default'] = undefined;\n        return this;\n      }\n      if (!isFunction(def) && !validateType(this, def)) {\n        warn(this._vueTypes_name + ' - invalid default value: \"' + def + '\"', def);\n        return this;\n      }\n      this['default'] = isArray(def) || isPlainObject(def) ? function () {\n        return def;\n      } : def;\n\n      return this;\n    },\n\n    enumerable: false,\n    writable: false\n  });\n};\n\n/**\n * Adds a `isRequired` getter returning a new object with `required: true` key-value\n *\n * @param {object} type - Object to enhance\n */\nexport var withRequired = function withRequired(type) {\n  Object.defineProperty(type, 'isRequired', {\n    get: function get() {\n      this.required = true;\n      return this;\n    },\n\n    enumerable: false\n  });\n};\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n * @returns {object}\n */\nexport var toType = function toType(name, obj) {\n  Object.defineProperty(obj, '_vueTypes_name', {\n    enumerable: false,\n    writable: false,\n    value: name\n  });\n  withRequired(obj);\n  withDefault(obj);\n\n  if (isFunction(obj.validator)) {\n    obj.validator = obj.validator.bind(obj);\n  }\n  return obj;\n};\n\n/**\n * Validates a given value against a prop type object\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n * @returns {boolean}\n */\nexport var validateType = function validateType(type, value) {\n  var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var typeToCheck = type;\n  var valid = true;\n  var expectedType = void 0;\n  if (!isPlainObject(type)) {\n    typeToCheck = { type: type };\n  }\n  var namePrefix = typeToCheck._vueTypes_name ? typeToCheck._vueTypes_name + ' - ' : '';\n\n  if (hasOwn.call(typeToCheck, 'type') && typeToCheck.type !== null) {\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(function (type) {\n        return validateType(type, value, true);\n      });\n      expectedType = typeToCheck.type.map(function (type) {\n        return getType(type);\n      }).join(' or ');\n    } else {\n      expectedType = getType(typeToCheck);\n\n      if (expectedType === 'Array') {\n        valid = isArray(value);\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value);\n      } else if (expectedType === 'String' || expectedType === 'Number' || expectedType === 'Boolean' || expectedType === 'Function') {\n        valid = getNativeType(value) === expectedType;\n      } else {\n        valid = value instanceof typeToCheck.type;\n      }\n    }\n  }\n\n  if (!valid) {\n    silent === false && warn(namePrefix + 'value \"' + value + '\" should be of type \"' + expectedType + '\"');\n    return false;\n  }\n\n  if (hasOwn.call(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    valid = typeToCheck.validator(value);\n    if (!valid && silent === false) warn(namePrefix + 'custom validation failed');\n    return valid;\n  }\n  return valid;\n};\n\nvar warn = noop;\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  warn = function warn(msg) {\n    if (hasConsole) {\n      console.warn('[VueTypes warn]: ' + msg);\n    }\n  };\n}\n\nexport { warn };"],"sourceRoot":""}