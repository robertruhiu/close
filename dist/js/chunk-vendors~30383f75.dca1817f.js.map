{"version":3,"sources":["webpack:///./node_modules/babel-helper-vue-jsx-merge-props/index.js"],"names":["nestRE","mergeFn","a","b","apply","this","arguments","module","exports","objs","reduce","aa","bb","key","nestedKey","temp","test","Array","isArray","concat"],"mappings":"2GAAA,IAAAA,EAAA,+CA4CA,SAAAC,EAAAC,EAAAC,GACA,kBACAD,KAAAE,MAAAC,KAAAC,WACAH,KAAAC,MAAAC,KAAAC,YA7CAC,EAAAC,QAAA,SAAAC,GACA,OAAAA,EAAAC,OAAA,SAAAR,EAAAC,GACA,IAAAQ,EAAAC,EAAAC,EAAAC,EAAAC,EACA,IAAAF,KAAAV,EAGA,GAFAQ,EAAAT,EAAAW,GACAD,EAAAT,EAAAU,GACAF,GAAAX,EAAAgB,KAAAH,GAcA,GAZA,UAAAA,IACA,kBAAAF,IACAI,EAAAJ,EACAT,EAAAW,GAAAF,EAAA,GACAA,EAAAI,IAAA,GAEA,kBAAAH,IACAG,EAAAH,EACAT,EAAAU,GAAAD,EAAA,GACAA,EAAAG,IAAA,IAGA,OAAAF,GAAA,aAAAA,GAAA,SAAAA,EAEA,IAAAC,KAAAF,EACAD,EAAAG,GAAAb,EAAAU,EAAAG,GAAAF,EAAAE,SAES,GAAAG,MAAAC,QAAAP,GACTT,EAAAW,GAAAF,EAAAQ,OAAAP,QACS,GAAAK,MAAAC,QAAAN,GACTV,EAAAW,GAAA,CAAAF,GAAAQ,OAAAP,QAEA,IAAAE,KAAAF,EACAD,EAAAG,GAAAF,EAAAE,QAIAZ,EAAAW,GAAAV,EAAAU,GAGA,OAAAX,GACG","file":"js/chunk-vendors~30383f75.dca1817f.js","sourcesContent":["var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/\n\nmodule.exports = function mergeJSXProps (objs) {\n  return objs.reduce(function (a, b) {\n    var aa, bb, key, nestedKey, temp\n    for (key in b) {\n      aa = a[key]\n      bb = b[key]\n      if (aa && nestRE.test(key)) {\n        // normalize class\n        if (key === 'class') {\n          if (typeof aa === 'string') {\n            temp = aa\n            a[key] = aa = {}\n            aa[temp] = true\n          }\n          if (typeof bb === 'string') {\n            temp = bb\n            b[key] = bb = {}\n            bb[temp] = true\n          }\n        }\n        if (key === 'on' || key === 'nativeOn' || key === 'hook') {\n          // merge functions\n          for (nestedKey in bb) {\n            aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey])\n          }\n        } else if (Array.isArray(aa)) {\n          a[key] = aa.concat(bb)\n        } else if (Array.isArray(bb)) {\n          a[key] = [aa].concat(bb)\n        } else {\n          for (nestedKey in bb) {\n            aa[nestedKey] = bb[nestedKey]\n          }\n        }\n      } else {\n        a[key] = b[key]\n      }\n    }\n    return a\n  }, {})\n}\n\nfunction mergeFn (a, b) {\n  return function () {\n    a && a.apply(this, arguments)\n    b && b.apply(this, arguments)\n  }\n}\n"],"sourceRoot":""}