{"version":3,"sources":["webpack:///./node_modules/youtube-player/dist/YouTubePlayer.js"],"names":["Object","defineProperty","exports","value","_debug","__webpack_require__","_debug2","_interopRequireDefault","_functionNames","_functionNames2","_eventNames","_eventNames2","_FunctionStateMap","_FunctionStateMap2","obj","__esModule","default","debug","YouTubePlayer","proxyEvents","emitter","events","_loop","eventName","onEventName","slice","toUpperCase","event","trigger","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","promisifyPlayer","playerAPIReady","strictState","arguments","length","functions","_loop2","functionName","_len","args","Array","_key","then","player","stateInfo","playerState","getPlayerState","apply","stateChangeRequired","isArray","acceptableStates","indexOf","Promise","resolve","onPlayerStateChange","playerStateAfterChange","timeout","setTimeout","removeEventListener","clearTimeout","addEventListener","_len2","_key2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","module"],"mappings":"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","file":"js/chunk-vendors~2f89ed2f.2916d636.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _functionNames = require('./functionNames');\n\nvar _functionNames2 = _interopRequireDefault(_functionNames);\n\nvar _eventNames = require('./eventNames');\n\nvar _eventNames2 = _interopRequireDefault(_eventNames);\n\nvar _FunctionStateMap = require('./FunctionStateMap');\n\nvar _FunctionStateMap2 = _interopRequireDefault(_FunctionStateMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable promise/prefer-await-to-then */\n\nvar debug = (0, _debug2.default)('youtube-player');\n\nvar YouTubePlayer = {};\n\n/**\n * Construct an object that defines an event handler for all of the YouTube\n * player events. Proxy captured events through an event emitter.\n *\n * @todo Capture event parameters.\n * @see https://developers.google.com/youtube/iframe_api_reference#Events\n */\nYouTubePlayer.proxyEvents = function (emitter) {\n  var events = {};\n\n  var _loop = function _loop(eventName) {\n    var onEventName = 'on' + eventName.slice(0, 1).toUpperCase() + eventName.slice(1);\n\n    events[onEventName] = function (event) {\n      debug('event \"%s\"', onEventName, event);\n\n      emitter.trigger(eventName, event);\n    };\n  };\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _eventNames2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var eventName = _step.value;\n\n      _loop(eventName);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return events;\n};\n\n/**\n * Delays player API method execution until player state is ready.\n *\n * @todo Proxy all of the methods using Object.keys.\n * @todo See TRICKY below.\n * @param playerAPIReady Promise that resolves when player is ready.\n * @param strictState A flag designating whether or not to wait for\n * an acceptable state when calling supported functions.\n * @returns {Object}\n */\nYouTubePlayer.promisifyPlayer = function (playerAPIReady) {\n  var strictState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var functions = {};\n\n  var _loop2 = function _loop2(functionName) {\n    if (strictState && _FunctionStateMap2.default[functionName]) {\n      functions[functionName] = function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return playerAPIReady.then(function (player) {\n          var stateInfo = _FunctionStateMap2.default[functionName];\n          var playerState = player.getPlayerState();\n\n          // eslint-disable-next-line no-warning-comments\n          // TODO: Just spread the args into the function once Babel is fixed:\n          // https://github.com/babel/babel/issues/4270\n          //\n          // eslint-disable-next-line prefer-spread\n          var value = player[functionName].apply(player, args);\n\n          // TRICKY: For functions like `seekTo`, a change in state must be\n          // triggered given that the resulting state could match the initial\n          // state.\n          if (stateInfo.stateChangeRequired ||\n\n          // eslint-disable-next-line no-extra-parens\n          Array.isArray(stateInfo.acceptableStates) && stateInfo.acceptableStates.indexOf(playerState) === -1) {\n            return new Promise(function (resolve) {\n              var onPlayerStateChange = function onPlayerStateChange() {\n                var playerStateAfterChange = player.getPlayerState();\n\n                var timeout = void 0;\n\n                if (typeof stateInfo.timeout === 'number') {\n                  timeout = setTimeout(function () {\n                    player.removeEventListener('onStateChange', onPlayerStateChange);\n\n                    resolve();\n                  }, stateInfo.timeout);\n                }\n\n                if (Array.isArray(stateInfo.acceptableStates) && stateInfo.acceptableStates.indexOf(playerStateAfterChange) !== -1) {\n                  player.removeEventListener('onStateChange', onPlayerStateChange);\n\n                  clearTimeout(timeout);\n\n                  resolve();\n                }\n              };\n\n              player.addEventListener('onStateChange', onPlayerStateChange);\n            }).then(function () {\n              return value;\n            });\n          }\n\n          return value;\n        });\n      };\n    } else {\n      functions[functionName] = function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return playerAPIReady.then(function (player) {\n          // eslint-disable-next-line no-warning-comments\n          // TODO: Just spread the args into the function once Babel is fixed:\n          // https://github.com/babel/babel/issues/4270\n          //\n          // eslint-disable-next-line prefer-spread\n          return player[functionName].apply(player, args);\n        });\n      };\n    }\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = _functionNames2.default[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var functionName = _step2.value;\n\n      _loop2(functionName);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return functions;\n};\n\nexports.default = YouTubePlayer;\nmodule.exports = exports['default'];"],"sourceRoot":""}