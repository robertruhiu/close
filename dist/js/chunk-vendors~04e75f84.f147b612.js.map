{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_fix-re-wks.js"],"names":["__webpack_require__","redefine","hide","fails","defined","wks","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","exec","result","groups","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","this","arguments","split","length","module","exports","KEY","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","undefined","nativeRegExpMethod","fns","nativeMethod","regexp","str","arg2","forceStringMethod","done","value","call","strfn","rxfn","String","prototype","RegExp","string","arg"],"mappings":"0HACAA,EAAQ,QACR,IAAAC,EAAeD,EAAQ,QACvBE,EAAWF,EAAQ,QACnBG,EAAYH,EAAQ,QACpBI,EAAcJ,EAAQ,QACtBK,EAAUL,EAAQ,QAClBM,EAAiBN,EAAQ,QAEzBO,EAAAF,EAAA,WAEAG,GAAAL,EAAA,WAIA,IAAAM,EAAA,IAMA,OALAA,EAAAC,KAAA,WACA,IAAAC,EAAA,GAEA,OADAA,EAAAC,OAAA,CAAqBC,EAAA,KACrBF,GAEA,SAAAG,QAAAL,EAAA,UAGAM,EAAA,WAEA,IAAAN,EAAA,OACAO,EAAAP,EAAAC,KACAD,EAAAC,KAAA,WAAyB,OAAAM,EAAAC,MAAAC,KAAAC,YACzB,IAAAR,EAAA,KAAAS,MAAAX,GACA,WAAAE,EAAAU,QAAA,MAAAV,EAAA,UAAAA,EAAA,GANA,GASAW,EAAAC,QAAA,SAAAC,EAAAH,EAAAX,GACA,IAAAe,EAAApB,EAAAmB,GAEAE,GAAAvB,EAAA,WAEA,IAAAwB,EAAA,GAEA,OADAA,EAAAF,GAAA,WAA6B,UAC7B,MAAAD,GAAAG,KAGAC,EAAAF,GAAAvB,EAAA,WAEA,IAAA0B,GAAA,EACApB,EAAA,IASA,OARAA,EAAAC,KAAA,WAA8C,OAAnBmB,GAAA,EAAmB,MAC9C,UAAAL,IAGAf,EAAAqB,YAAA,GACArB,EAAAqB,YAAAvB,GAAA,WAA6C,OAAAE,IAE7CA,EAAAgB,GAAA,KACAI,SACGE,EAEH,IACAL,IACAE,GACA,YAAAJ,IAAAhB,GACA,UAAAgB,IAAAT,EACA,CACA,IAAAiB,EAAA,IAAAP,GACAQ,EAAAvB,EACAN,EACAqB,EACA,GAAAD,GACA,SAAAU,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAzB,OAAAJ,EACAoB,IAAAY,EAIA,CAAoBC,MAAA,EAAAC,MAAAR,EAAAS,KAAAN,EAAAC,EAAAC,IAEpB,CAAkBE,MAAA,EAAAC,MAAAN,EAAAO,KAAAL,EAAAD,EAAAE,IAElB,CAAgBE,MAAA,KAGhBG,EAAAT,EAAA,GACAU,EAAAV,EAAA,GAEAhC,EAAA2C,OAAAC,UAAArB,EAAAkB,GACAxC,EAAA4C,OAAAD,UAAApB,EAAA,GAAAJ,EAGA,SAAA0B,EAAAC,GAAgC,OAAAL,EAAAF,KAAAM,EAAA7B,KAAA8B,IAGhC,SAAAD,GAA2B,OAAAJ,EAAAF,KAAAM,EAAA7B","file":"js/chunk-vendors~04e75f84.f147b612.js","sourcesContent":["'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n"],"sourceRoot":""}