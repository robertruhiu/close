{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-tabs/src/InkTabBarNode.js"],"names":["babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default","_util_vue_types__WEBPACK_IMPORTED_MODULE_2__","_utils__WEBPACK_IMPORTED_MODULE_3__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_4__","componentDidUpdate","component","init","_component$$props","$props","_component$$props$sty","styles","undefined","panels","activeKey","rootNode","getRef","wrapNode","inkBarNode","activeTab","inkBarNodeStyle","style","tabBarPosition","activeIndex","Object","display","tabNode","transformSupported","width","height","left","top","bottom","right","offsetWidth","inkBar","parseFloat","offsetHeight","__webpack_exports__","name","mixins","props","inkBarAnimated","type","Boolean","default","prefixCls","String","saveRef","func","def","array","oneOfType","string","number","updated","this","$nextTick","mounted","render","_classes","h","arguments","_styles","className","classes","class","key","directives","value"],"mappings":"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","file":"js/chunk-vendors~aafea5e1.0ec1b4a0.js","sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport PropTypes from '../../_util/vue-types';\nimport { setTransform, isTransformSupported, getLeft, getTop, getActiveIndex } from './utils';\nimport BaseMixin from '../../_util/BaseMixin';\n\nfunction componentDidUpdate(component, init) {\n  var _component$$props = component.$props,\n      _component$$props$sty = _component$$props.styles,\n      styles = _component$$props$sty === undefined ? {} : _component$$props$sty,\n      panels = _component$$props.panels,\n      activeKey = _component$$props.activeKey;\n\n  var rootNode = component.getRef('root');\n  var wrapNode = component.getRef('nav') || rootNode;\n  var inkBarNode = component.getRef('inkBar');\n  var activeTab = component.getRef('activeTab');\n  var inkBarNodeStyle = inkBarNode.style;\n  var tabBarPosition = component.$props.tabBarPosition;\n  var activeIndex = getActiveIndex(panels, activeKey);\n  if (init) {\n    // prevent mount animation\n    inkBarNodeStyle.display = 'none';\n  }\n  if (activeTab) {\n    var tabNode = activeTab;\n    var transformSupported = isTransformSupported(inkBarNodeStyle);\n\n    // Reset current style\n    setTransform(inkBarNodeStyle, '');\n    inkBarNodeStyle.width = '';\n    inkBarNodeStyle.height = '';\n    inkBarNodeStyle.left = '';\n    inkBarNodeStyle.top = '';\n    inkBarNodeStyle.bottom = '';\n    inkBarNodeStyle.right = '';\n\n    if (tabBarPosition === 'top' || tabBarPosition === 'bottom') {\n      var left = getLeft(tabNode, wrapNode);\n      var width = tabNode.offsetWidth;\n      // If tabNode'width width equal to wrapNode'width when tabBarPosition is top or bottom\n      // It means no css working, then ink bar should not have width until css is loaded\n      // Fix https://github.com/ant-design/ant-design/issues/7564\n      if (width === rootNode.offsetWidth) {\n        width = 0;\n      } else if (styles.inkBar && styles.inkBar.width !== undefined) {\n        width = parseFloat(styles.inkBar.width, 10);\n        if (width) {\n          left += (tabNode.offsetWidth - width) / 2;\n        }\n      }\n      // use 3d gpu to optimize render\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, 'translate3d(' + left + 'px,0,0)');\n      } else {\n        inkBarNodeStyle.left = left + 'px';\n      }\n      inkBarNodeStyle.width = width + 'px';\n    } else {\n      var top = getTop(tabNode, wrapNode, true);\n      var height = tabNode.offsetHeight;\n      if (styles.inkBar && styles.inkBar.height !== undefined) {\n        height = parseFloat(styles.inkBar.height, 10);\n        if (height) {\n          top += (tabNode.offsetHeight - height) / 2;\n        }\n      }\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, 'translate3d(0,' + top + 'px,0)');\n        inkBarNodeStyle.top = '0';\n      } else {\n        inkBarNodeStyle.top = top + 'px';\n      }\n      inkBarNodeStyle.height = height + 'px';\n    }\n  }\n  inkBarNodeStyle.display = activeIndex !== -1 ? 'block' : 'none';\n}\n\nexport default {\n  name: 'InkTabBarNode',\n  mixins: [BaseMixin],\n  props: {\n    inkBarAnimated: {\n      type: Boolean,\n      'default': true\n    },\n    prefixCls: String,\n    styles: Object,\n    tabBarPosition: String,\n    saveRef: PropTypes.func.def(function () {}),\n    getRef: PropTypes.func.def(function () {}),\n    panels: PropTypes.array,\n    activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  },\n  updated: function updated() {\n    this.$nextTick(function () {\n      componentDidUpdate(this);\n    });\n  },\n  mounted: function mounted() {\n    this.$nextTick(function () {\n      componentDidUpdate(this, true);\n    });\n  },\n  render: function render() {\n    var _classes;\n\n    var h = arguments[0];\n    var prefixCls = this.prefixCls,\n        _styles = this.styles,\n        styles = _styles === undefined ? {} : _styles,\n        inkBarAnimated = this.inkBarAnimated;\n\n    var className = prefixCls + '-ink-bar';\n    var classes = (_classes = {}, _defineProperty(_classes, className, true), _defineProperty(_classes, inkBarAnimated ? className + '-animated' : className + '-no-animated', true), _classes);\n    return h('div', _mergeJSXProps([{\n      style: styles.inkBar,\n      'class': classes,\n      key: 'inkBar'\n    }, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.saveRef('inkBar')\n      }]\n    }]));\n  }\n};"],"sourceRoot":""}