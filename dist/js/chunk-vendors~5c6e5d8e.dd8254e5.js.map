{"version":3,"sources":["webpack:///./node_modules/youtube-player/node_modules/debug/src/debug.js"],"names":["prevTime","selectColor","namespace","i","hash","charCodeAt","exports","colors","Math","abs","length","createDebug","debug","enabled","self","curr","Date","ms","diff","prev","args","Array","arguments","coerce","unshift","index","replace","match","format","formatter","formatters","val","call","splice","formatArgs","logFn","log","console","bind","apply","useColors","color","init","enable","namespaces","save","names","skips","split","len","push","RegExp","substr","disable","name","test","Error","stack","message","module","humanize","__webpack_require__"],"mappings":"2GAkCA,IAAAA,EASA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAA,EAEA,IAAAD,KAAAD,EACAE,MAAA,GAAAA,EAAAF,EAAAG,WAAAF,GACAC,GAAA,EAGA,OAAAE,EAAAC,OAAAC,KAAAC,IAAAL,GAAAE,EAAAC,OAAAG,QAWA,SAAAC,EAAAT,GAEA,SAAAU,IAEA,GAAAA,EAAAC,QAAA,CAEA,IAAAC,EAAAF,EAGAG,GAAA,IAAAC,KACAC,EAAAF,GAAAf,GAAAe,GACAD,EAAAI,KAAAD,EACAH,EAAAK,KAAAnB,EACAc,EAAAC,OACAf,EAAAe,EAIA,IADA,IAAAK,EAAA,IAAAC,MAAAC,UAAAZ,QACAP,EAAA,EAAmBA,EAAAiB,EAAAV,OAAiBP,IACpCiB,EAAAjB,GAAAmB,UAAAnB,GAGAiB,EAAA,GAAAd,EAAAiB,OAAAH,EAAA,IAEA,kBAAAA,EAAA,IAEAA,EAAAI,QAAA,MAIA,IAAAC,EAAA,EACAL,EAAA,GAAAA,EAAA,GAAAM,QAAA,yBAAAC,EAAAC,GAEA,UAAAD,EAAA,OAAAA,EACAF,IACA,IAAAI,EAAAvB,EAAAwB,WAAAF,GACA,uBAAAC,EAAA,CACA,IAAAE,EAAAX,EAAAK,GACAE,EAAAE,EAAAG,KAAAlB,EAAAiB,GAGAX,EAAAa,OAAAR,EAAA,GACAA,IAEA,OAAAE,IAIArB,EAAA4B,WAAAF,KAAAlB,EAAAM,GAEA,IAAAe,EAAAvB,EAAAwB,KAAA9B,EAAA8B,KAAAC,QAAAD,IAAAE,KAAAD,SACAF,EAAAI,MAAAzB,EAAAM,IAaA,OAVAR,EAAAV,YACAU,EAAAC,QAAAP,EAAAO,QAAAX,GACAU,EAAA4B,UAAAlC,EAAAkC,YACA5B,EAAA6B,MAAAxC,EAAAC,GAGA,oBAAAI,EAAAoC,MACApC,EAAAoC,KAAA9B,GAGAA,EAWA,SAAA+B,EAAAC,GACAtC,EAAAuC,KAAAD,GAEAtC,EAAAwC,MAAA,GACAxC,EAAAyC,MAAA,GAKA,IAHA,IAAAC,GAAA,kBAAAJ,IAAA,IAAAI,MAAA,UACAC,EAAAD,EAAAtC,OAEAP,EAAA,EAAiBA,EAAA8C,EAAS9C,IAC1B6C,EAAA7C,KACAyC,EAAAI,EAAA7C,GAAAuB,QAAA,aACA,MAAAkB,EAAA,GACAtC,EAAAyC,MAAAG,KAAA,IAAAC,OAAA,IAAAP,EAAAQ,OAAA,SAEA9C,EAAAwC,MAAAI,KAAA,IAAAC,OAAA,IAAAP,EAAA,OAWA,SAAAS,IACA/C,EAAAqC,OAAA,IAWA,SAAA9B,EAAAyC,GACA,IAAAnD,EAAA8C,EACA,IAAA9C,EAAA,EAAA8C,EAAA3C,EAAAyC,MAAArC,OAAyCP,EAAA8C,EAAS9C,IAClD,GAAAG,EAAAyC,MAAA5C,GAAAoD,KAAAD,GACA,SAGA,IAAAnD,EAAA,EAAA8C,EAAA3C,EAAAwC,MAAApC,OAAyCP,EAAA8C,EAAS9C,IAClD,GAAAG,EAAAwC,MAAA3C,GAAAoD,KAAAD,GACA,SAGA,SAWA,SAAA/B,EAAAQ,GACA,OAAAA,aAAAyB,MAAAzB,EAAA0B,OAAA1B,EAAA2B,QACA3B,EAhMAzB,EAAAqD,EAAArD,QAAAK,EAAAC,MAAAD,EAAA,WAAAA,EACAL,EAAAiB,SACAjB,EAAA+C,UACA/C,EAAAqC,SACArC,EAAAO,UACAP,EAAAsD,SAAmBC,EAAQ,QAM3BvD,EAAAwC,MAAA,GACAxC,EAAAyC,MAAA,GAQAzC,EAAAwB,WAAA","file":"js/chunk-vendors~5c6e5d8e.dd8254e5.js","sourcesContent":["\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n"],"sourceRoot":""}