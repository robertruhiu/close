{"version":3,"sources":["webpack:///./node_modules/async-validator/es/rule/pattern.js"],"names":["Object","defineProperty","exports","value","_util","__webpack_require__","util","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","pattern","rule","source","errors","options","RegExp","lastIndex","test","push","format","messages","mismatch","fullField","_pattern"],"mappings":"0HAEAA,OAAAC,eAAAC,EAAA,cACAC,OAAA,IAGA,IAAAC,EAAYC,EAAQ,QAEpBC,EAAAC,EAAAH,GAEA,SAAAG,EAAAC,GAAuC,GAAAA,KAAAC,WAA6B,OAAAD,EAAqB,IAAAE,EAAA,GAAiB,SAAAF,EAAmB,QAAAG,KAAAH,EAAuBR,OAAAY,UAAAC,eAAAC,KAAAN,EAAAG,KAAAD,EAAAC,GAAAH,EAAAG,IAAyG,OAAzBD,EAAA,WAAAF,EAAyBE,EAa7P,SAAAK,EAAAC,EAAAb,EAAAc,EAAAC,EAAAC,GACA,GAAAH,EAAAD,QACA,GAAAC,EAAAD,mBAAAK,OAIAJ,EAAAD,QAAAM,UAAA,EACAL,EAAAD,QAAAO,KAAAnB,IACAe,EAAAK,KAAAjB,EAAAkB,OAAAL,EAAAM,SAAAV,QAAAW,SAAAV,EAAAW,UAAAxB,EAAAa,EAAAD,eAEK,qBAAAC,EAAAD,QAAA,CACL,IAAAa,EAAA,IAAAR,OAAAJ,EAAAD,SACAa,EAAAN,KAAAnB,IACAe,EAAAK,KAAAjB,EAAAkB,OAAAL,EAAAM,SAAAV,QAAAW,SAAAV,EAAAW,UAAAxB,EAAAa,EAAAD,WAMAb,EAAA,WAAAa","file":"js/chunk-vendors~14e120b7.2589d25d.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require('../util');\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/**\n *  Rule for validating a regular expression pattern.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n}\n\nexports['default'] = pattern;"],"sourceRoot":""}