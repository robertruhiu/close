{"version":3,"sources":["webpack:///./node_modules/lodash/_baseToString.js"],"names":["Symbol","__webpack_require__","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":"2GAAA,IAAAA,EAAaC,EAAQ,QACrBC,EAAeD,EAAQ,QACvBE,EAAcF,EAAQ,QACtBG,EAAeH,EAAQ,QAGvBI,EAAA,IAGAC,EAAAN,IAAAO,eAAAC,EACAC,EAAAH,IAAAI,cAAAF,EAUA,SAAAG,EAAAC,GAEA,oBAAAA,EACA,OAAAA,EAEA,GAAAT,EAAAS,GAEA,OAAAV,EAAAU,EAAAD,GAAA,GAEA,GAAAP,EAAAQ,GACA,OAAAH,IAAAI,KAAAD,GAAA,GAEA,IAAAE,EAAAF,EAAA,GACA,WAAAE,GAAA,EAAAF,IAAAP,EAAA,KAAAS,EAGAC,EAAAC,QAAAL","file":"js/chunk-vendors~eff1ae97.51247b2c.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"],"sourceRoot":""}