{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-table/src/TableCell.js"],"names":["babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","n","_util_vue_types__WEBPACK_IMPORTED_MODULE_1__","lodash_get__WEBPACK_IMPORTED_MODULE_2__","lodash_get__WEBPACK_IMPORTED_MODULE_2___default","_util_props_util__WEBPACK_IMPORTED_MODULE_3__","isInvalidRenderCellText","text","Object","prototype","toString","call","__webpack_exports__","name","props","record","object","prefixCls","string","index","number","indent","indentSize","column","expandIcon","any","component","methods","handleClick","e","this","onCellClick","render","h","arguments","BodyCell","dataIndex","customRender","_column$className","className","undefined","cls","length","tdProps","attrs","class","on","click","colSpan","rowSpan","children","customCell","indentText","style","paddingLeft","align","textAlign"],"mappings":"0HAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,QAAAI,EAAAJ,EAAA,QAAAK,EAAAL,EAAAE,EAAAE,GAAAE,EAAAN,EAAA,QAKA,SAAAO,EAAAC,GACA,OAAAA,IAAkBC,OAAAH,EAAA,KAAAG,CAAcD,IAAA,oBAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,GAGjBK,EAAA,MACfC,KAAA,YACAC,MAAA,CACAC,OAAYb,EAAA,KAASc,OACrBC,UAAef,EAAA,KAASgB,OACxBC,MAAWjB,EAAA,KAASkB,OACpBC,OAAYnB,EAAA,KAASkB,OACrBE,WAAgBpB,EAAA,KAASkB,OACzBG,OAAYrB,EAAA,KAASc,OACrBQ,WAAgBtB,EAAA,KAASuB,IACzBC,UAAexB,EAAA,KAASuB,KAExBE,QAAA,CACAC,YAAA,SAAAC,GACA,IAAAd,EAAAe,KAAAf,OACAgB,EAAAD,KAAAP,OAAAQ,YAEAA,GACAA,EAAAhB,EAAAc,KAKAG,OAAA,WACA,IAAAC,EAAAC,UAAA,GACAnB,EAAAe,KAAAf,OACAO,EAAAQ,KAAAR,WACAL,EAAAa,KAAAb,UACAI,EAAAS,KAAAT,OACAF,EAAAW,KAAAX,MACAK,EAAAM,KAAAN,WACAD,EAAAO,KAAAP,OACAY,EAAAL,KAAAJ,UACAU,EAAAb,EAAAa,UACAC,EAAAd,EAAAc,aACAC,EAAAf,EAAAgB,UACAA,OAAAC,IAAAF,EAAA,GAAAA,EAEAG,EAAAF,GAAAhB,EAAA,SAGAhB,OAAA,EAEAA,EADA,kBAAA6B,EACahC,IAAGW,EAAAqB,GACXA,GAAA,IAAAA,EAAAM,OAGQtC,IAAGW,EAAAqB,GAFhBrB,EAIA,IAAA4B,EAAA,CACA7B,MAAA,GACA8B,MAAA,GACAC,MAAAJ,EACAK,GAAA,CACAC,MAAAjB,KAAAF,cAGAoB,OAAA,EACAC,OAAA,EAEAZ,IACA9B,EAAA8B,EAAA9B,EAAAQ,EAAAI,GACAb,EAAAC,KACAoC,EAAAC,MAAArC,EAAAqC,OAAA,GACAD,EAAA7B,MAAAP,EAAAO,OAAA,GACAkC,EAAAL,EAAAC,MAAAI,QACAC,EAAAN,EAAAC,MAAAK,QACA1C,IAAA2C,WAIA3B,EAAA4B,aACAR,EAAgBnC,OAAAH,EAAA,KAAAG,CAAUmC,EAAApB,EAAA4B,WAAApC,EAAAI,KAI1Bb,EAAAC,KACAA,EAAA,MAGA,IAAA6C,EAAA5B,EAAAS,EAAA,QACAoB,MAAA,CAAcC,YAAAhC,EAAAD,EAAA,MACdwB,MAAA5B,EAAA,wBAAAI,IACK,KAEL,WAAA4B,GAAA,IAAAD,EACA,MAEAzB,EAAAgC,QACAZ,EAAAU,MAAsBrD,IAAQ,GAAG2C,EAAAU,MAAA,CAAkBG,UAAAjC,EAAAgC,SAGnDtB,EACAE,EACAQ,EACA,CAAAS,EAAA5B,EAAAjB","file":"js/chunk-vendors~0c04d151.aa42a2e8.js","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport PropTypes from '../../_util/vue-types';\nimport get from 'lodash/get';\nimport { isValidElement, mergeProps } from '../../_util/props-util';\n\nfunction isInvalidRenderCellText(text) {\n  return text && !isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';\n}\n\nexport default {\n  name: 'TableCell',\n  props: {\n    record: PropTypes.object,\n    prefixCls: PropTypes.string,\n    index: PropTypes.number,\n    indent: PropTypes.number,\n    indentSize: PropTypes.number,\n    column: PropTypes.object,\n    expandIcon: PropTypes.any,\n    component: PropTypes.any\n  },\n  methods: {\n    handleClick: function handleClick(e) {\n      var record = this.record,\n          onCellClick = this.column.onCellClick;\n\n      if (onCellClick) {\n        onCellClick(record, e);\n      }\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var record = this.record,\n        indentSize = this.indentSize,\n        prefixCls = this.prefixCls,\n        indent = this.indent,\n        index = this.index,\n        expandIcon = this.expandIcon,\n        column = this.column,\n        BodyCell = this.component;\n    var dataIndex = column.dataIndex,\n        customRender = column.customRender,\n        _column$className = column.className,\n        className = _column$className === undefined ? '' : _column$className;\n\n    var cls = className || column['class'];\n    // We should return undefined if no dataIndex is specified, but in order to\n    // be compatible with object-path's behavior, we return the record object instead.\n    var text = void 0;\n    if (typeof dataIndex === 'number') {\n      text = get(record, dataIndex);\n    } else if (!dataIndex || dataIndex.length === 0) {\n      text = record;\n    } else {\n      text = get(record, dataIndex);\n    }\n    var tdProps = {\n      props: {},\n      attrs: {},\n      'class': cls,\n      on: {\n        click: this.handleClick\n      }\n    };\n    var colSpan = void 0;\n    var rowSpan = void 0;\n\n    if (customRender) {\n      text = customRender(text, record, index);\n      if (isInvalidRenderCellText(text)) {\n        tdProps.attrs = text.attrs || {};\n        tdProps.props = text.props || {};\n        colSpan = tdProps.attrs.colSpan;\n        rowSpan = tdProps.attrs.rowSpan;\n        text = text.children;\n      }\n    }\n\n    if (column.customCell) {\n      tdProps = mergeProps(tdProps, column.customCell(record, index));\n    }\n\n    // Fix https://github.com/ant-design/ant-design/issues/1202\n    if (isInvalidRenderCellText(text)) {\n      text = null;\n    }\n\n    var indentText = expandIcon ? h('span', {\n      style: { paddingLeft: indentSize * indent + 'px' },\n      'class': prefixCls + '-indent indent-level-' + indent\n    }) : null;\n\n    if (rowSpan === 0 || colSpan === 0) {\n      return null;\n    }\n    if (column.align) {\n      tdProps.style = _extends({}, tdProps.style, { textAlign: column.align });\n    }\n\n    return h(\n      BodyCell,\n      tdProps,\n      [indentText, expandIcon, text]\n    );\n  }\n};"],"sourceRoot":""}