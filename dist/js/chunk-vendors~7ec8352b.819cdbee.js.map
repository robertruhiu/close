{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/table/SelectionCheckboxAll.js"],"names":["babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default","n","_checkbox__WEBPACK_IMPORTED_MODULE_1__","_dropdown__WEBPACK_IMPORTED_MODULE_2__","_menu__WEBPACK_IMPORTED_MODULE_3__","_icon__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_5__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_interface__WEBPACK_IMPORTED_MODULE_6__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_7__","__webpack_exports__","name","mixins","props","data","this","$props","defaultSelections","hideDefaultSelections","key","text","locale","selectAll","onSelect","selectInvert","checked","getCheckState","indeterminate","getIndeterminateState","watch","handler","setCheckState","deep","mounted","subscribe","beforeDestroy","unsubscribe","methods","_this","store","checkSelection","type","byDefaultChecked","_ref","getCheckboxPropsByItem","getRecordKey","item","i","defaultChecked","getState","selectedRowKeys","indexOf","setState","prevState","newState","length","selectionDirty","handleSelectAllChange","e","target","$emit","renderMenus","selections","_this2","h","$createElement","map","selection","index","Item","on","click","render","arguments","disabled","prefixCls","getPopupContainer","selectionPrefixCls","customSelections","newSelections","Array","isArray","concat","menu","class","attrs","selectedKeys","slot","change"],"mappings":"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","file":"js/chunk-vendors~7ec8352b.819cdbee.js","sourcesContent":["import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport Menu from '../menu';\nimport Icon from '../icon';\nimport classNames from 'classnames';\nimport { SelectionCheckboxAllProps } from './interface';\nimport BaseMixin from '../_util/BaseMixin';\n\nexport default {\n  name: 'SelectionCheckboxAll',\n  mixins: [BaseMixin],\n  props: SelectionCheckboxAllProps,\n  data: function data() {\n    var props = this.$props;\n\n    this.defaultSelections = props.hideDefaultSelections ? [] : [{\n      key: 'all',\n      text: props.locale.selectAll,\n      onSelect: function onSelect() {}\n    }, {\n      key: 'invert',\n      text: props.locale.selectInvert,\n      onSelect: function onSelect() {}\n    }];\n\n    return {\n      checked: this.getCheckState(props),\n      indeterminate: this.getIndeterminateState(props)\n    };\n  },\n\n\n  watch: {\n    $props: {\n      handler: function handler() {\n        this.setCheckState();\n      },\n      deep: true\n    }\n  },\n\n  mounted: function mounted() {\n    this.subscribe();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  },\n\n  methods: {\n    subscribe: function subscribe() {\n      var _this = this;\n\n      var store = this.store;\n\n      this.unsubscribe = store.subscribe(function () {\n        _this.setCheckState(_this.$props);\n      });\n    },\n    checkSelection: function checkSelection(props, data, type, byDefaultChecked) {\n      var _ref = props || this.$props,\n          store = _ref.store,\n          getCheckboxPropsByItem = _ref.getCheckboxPropsByItem,\n          getRecordKey = _ref.getRecordKey;\n      // type should be 'every' | 'some'\n\n\n      if (type === 'every' || type === 'some') {\n        return byDefaultChecked ? data[type](function (item, i) {\n          return getCheckboxPropsByItem(item, i).props.defaultChecked;\n        }) : data[type](function (item, i) {\n          return store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0;\n        });\n      }\n      return false;\n    },\n    setCheckState: function setCheckState(props) {\n      var checked = this.getCheckState(props);\n      var indeterminate = this.getIndeterminateState(props);\n      this.setState(function (prevState) {\n        var newState = {};\n        if (indeterminate !== prevState.indeterminate) {\n          newState.indeterminate = indeterminate;\n        }\n        if (checked !== prevState.checked) {\n          newState.checked = checked;\n        }\n        return newState;\n      });\n    },\n    getCheckState: function getCheckState(props) {\n      var store = this.store,\n          data = this.data;\n\n      var checked = void 0;\n      if (!data.length) {\n        checked = false;\n      } else {\n        checked = store.getState().selectionDirty ? this.checkSelection(props, data, 'every', false) : this.checkSelection(props, data, 'every', false) || this.checkSelection(props, data, 'every', true);\n      }\n      return checked;\n    },\n    getIndeterminateState: function getIndeterminateState(props) {\n      var store = this.store,\n          data = this.data;\n\n      var indeterminate = void 0;\n      if (!data.length) {\n        indeterminate = false;\n      } else {\n        indeterminate = store.getState().selectionDirty ? this.checkSelection(props, data, 'some', false) && !this.checkSelection(props, data, 'every', false) : this.checkSelection(props, data, 'some', false) && !this.checkSelection(props, data, 'every', false) || this.checkSelection(props, data, 'some', true) && !this.checkSelection(props, data, 'every', true);\n      }\n      return indeterminate;\n    },\n    handleSelectAllChange: function handleSelectAllChange(e) {\n      var checked = e.target.checked;\n      this.$emit('select', checked ? 'all' : 'removeAll', 0, null);\n    },\n    renderMenus: function renderMenus(selections) {\n      var _this2 = this;\n\n      var h = this.$createElement;\n\n      return selections.map(function (selection, index) {\n        return h(\n          Menu.Item,\n          { key: selection.key || index },\n          [h(\n            'div',\n            {\n              on: {\n                'click': function click() {\n                  _this2.$emit('select', selection.key, index, selection.onSelect);\n                }\n              }\n            },\n            [selection.text]\n          )]\n        );\n      });\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var disabled = this.disabled,\n        prefixCls = this.prefixCls,\n        selections = this.selections,\n        getPopupContainer = this.getPopupContainer,\n        checked = this.checked,\n        indeterminate = this.indeterminate;\n\n\n    var selectionPrefixCls = prefixCls + '-selection';\n\n    var customSelections = null;\n\n    if (selections) {\n      var newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;\n\n      var menu = h(\n        Menu,\n        { 'class': selectionPrefixCls + '-menu', attrs: { selectedKeys: [] }\n        },\n        [this.renderMenus(newSelections)]\n      );\n\n      customSelections = newSelections.length > 0 ? h(\n        Dropdown,\n        {\n          attrs: { getPopupContainer: getPopupContainer }\n        },\n        [h(\n          'template',\n          { slot: 'overlay' },\n          [menu]\n        ), h(\n          'div',\n          { 'class': selectionPrefixCls + '-down' },\n          [h(Icon, {\n            attrs: { type: 'down' }\n          })]\n        )]\n      ) : null;\n    }\n\n    return h(\n      'div',\n      { 'class': selectionPrefixCls },\n      [h(Checkbox, {\n        'class': classNames(_defineProperty({}, selectionPrefixCls + '-select-all-custom', customSelections)),\n        attrs: { checked: checked,\n          indeterminate: indeterminate,\n          disabled: disabled\n        },\n        on: {\n          'change': this.handleSelectAllChange\n        }\n      }), customSelections]\n    );\n  }\n};"],"sourceRoot":""}