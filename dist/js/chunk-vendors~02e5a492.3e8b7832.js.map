{"version":3,"sources":["webpack:///./node_modules/axios/lib/core/dispatchRequest.js"],"names":["utils","__webpack_require__","transformData","isCancel","defaults","isAbsoluteURL","combineURLs","throwIfCancellationRequested","config","cancelToken","throwIfRequested","module","exports","baseURL","url","headers","data","transformRequest","merge","common","method","forEach","adapter","then","response","transformResponse","reason","Promise","reject"],"mappings":"wHAEA,IAAAA,EAAYC,EAAQ,QACpBC,EAAoBD,EAAQ,QAC5BE,EAAeF,EAAQ,QACvBG,EAAeH,EAAQ,QACvBI,EAAoBJ,EAAQ,QAC5BK,EAAkBL,EAAQ,QAK1B,SAAAM,EAAAC,GACAA,EAAAC,aACAD,EAAAC,YAAAC,mBAUAC,EAAAC,QAAA,SAAAJ,GACAD,EAAAC,GAGAA,EAAAK,UAAAR,EAAAG,EAAAM,OACAN,EAAAM,IAAAR,EAAAE,EAAAK,QAAAL,EAAAM,MAIAN,EAAAO,QAAAP,EAAAO,SAAA,GAGAP,EAAAQ,KAAAd,EACAM,EAAAQ,KACAR,EAAAO,QACAP,EAAAS,kBAIAT,EAAAO,QAAAf,EAAAkB,MACAV,EAAAO,QAAAI,QAAA,GACAX,EAAAO,QAAAP,EAAAY,SAAA,GACAZ,EAAAO,SAAA,IAGAf,EAAAqB,QACA,sDACA,SAAAD,UACAZ,EAAAO,QAAAK,KAIA,IAAAE,EAAAd,EAAAc,SAAAlB,EAAAkB,QAEA,OAAAA,EAAAd,GAAAe,KAAA,SAAAC,GAUA,OATAjB,EAAAC,GAGAgB,EAAAR,KAAAd,EACAsB,EAAAR,KACAQ,EAAAT,QACAP,EAAAiB,mBAGAD,GACG,SAAAE,GAcH,OAbAvB,EAAAuB,KACAnB,EAAAC,GAGAkB,KAAAF,WACAE,EAAAF,SAAAR,KAAAd,EACAwB,EAAAF,SAAAR,KACAU,EAAAF,SAAAT,QACAP,EAAAiB,qBAKAE,QAAAC,OAAAF","file":"js/chunk-vendors~02e5a492.3e8b7832.js","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n"],"sourceRoot":""}