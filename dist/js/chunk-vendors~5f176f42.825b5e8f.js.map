{"version":3,"sources":["webpack:///./node_modules/lodash/_baseMatchesProperty.js"],"names":["baseIsEqual","__webpack_require__","get","hasIn","isKey","isStrictComparable","matchesStrictComparable","toKey","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","path","srcValue","object","objValue","undefined","module","exports"],"mappings":"2GAAA,IAAAA,EAAkBC,EAAQ,QAC1BC,EAAUD,EAAQ,QAClBE,EAAYF,EAAQ,QACpBG,EAAYH,EAAQ,QACpBI,EAAyBJ,EAAQ,QACjCK,EAA8BL,EAAQ,QACtCM,EAAYN,EAAQ,QAGpBO,EAAA,EACAC,EAAA,EAUA,SAAAC,EAAAC,EAAAC,GACA,OAAAR,EAAAO,IAAAN,EAAAO,GACAN,EAAAC,EAAAI,GAAAC,GAEA,SAAAC,GACA,IAAAC,EAAAZ,EAAAW,EAAAF,GACA,YAAAI,IAAAD,OAAAF,EACAT,EAAAU,EAAAF,GACAX,EAAAY,EAAAE,EAAAN,EAAAC,IAIAO,EAAAC,QAAAP","file":"js/chunk-vendors~5f176f42.825b5e8f.js","sourcesContent":["var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"],"sourceRoot":""}