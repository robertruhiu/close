{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/form/FormItem.js"],"names":["babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2___default","babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_3__","babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_3___default","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default","intersperse__WEBPACK_IMPORTED_MODULE_5__","intersperse__WEBPACK_IMPORTED_MODULE_5___default","_util_vue_types__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_7__","classnames__WEBPACK_IMPORTED_MODULE_7___default","lodash_find__WEBPACK_IMPORTED_MODULE_8__","lodash_find__WEBPACK_IMPORTED_MODULE_8___default","_grid_Row__WEBPACK_IMPORTED_MODULE_9__","_grid_Col__WEBPACK_IMPORTED_MODULE_10__","_util_warning__WEBPACK_IMPORTED_MODULE_11__","_constants__WEBPACK_IMPORTED_MODULE_12__","_util_props_util__WEBPACK_IMPORTED_MODULE_13__","_util_getTransitionProps__WEBPACK_IMPORTED_MODULE_14__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_15__","_util_vnode__WEBPACK_IMPORTED_MODULE_16__","_icon__WEBPACK_IMPORTED_MODULE_17__","noop","FormItemProps","id","string","prefixCls","label","any","labelCol","shape","loose","wrapperCol","help","extra","validateStatus","oneOf","hasFeedback","bool","required","colon","fieldDecoratorId","fieldDecoratorOptions","object","comeFromSlot","vnodes","arguments","length","undefined","itemVnode","isSlot","i","len","vnode","$vnode","children","componentOptions","__webpack_exports__","name","__ANT_FORM_ITEM","mixins","props","Object","inject","FormProps","default","decoratorFormProps","collectFormItemContext","data","helpShow","created","this","collectContext","beforeUpdate","beforeDestroy","context","mounted","getControls","slotDefault","methods","form","templateContext","values","$slots","reduce","a","b","concat","isSlotScope","$children","getHelpMessage","onlyControl","getOnlyControl","errors","getField","map","e","index","message","key","childrenArray","recursively","controls","child","tag","text","trim","attrs","push","getChildAttr","prop","getId","getMeta","onHelpAnimEnd","_key","$forceUpdate","renderHelp","_this","h","$createElement","class","transitionProps","afterEnter","afterLeave","renderExtra","getValidateStatus","field","validating","fieldValue","value","initialValue","renderValidateWrapper","c1","c2","c3","$props","classes","has-feedback","has-success","has-warning","has-error","is-validating","iconType","icon","type","theme","renderWrapper","_wrapperCol","cls","style","on","restProps","className","colProps","isRequired","meta","validate","filter","item","rules","some","rule","onLabelClick","document","querySelectorAll","preventDefault","control","$el","querySelector","focus","renderLabel","_labelCol","labelColClass","labelColStyle","labelColId","labelColClassName","labelClassName","labelChildren","haveColon","layout","replace","for","title","click","renderChildren","renderFormItem","_itemClassName","itemClassName","decoratorOption","directives","directive","Array","isArray","decoratorChildren","getFieldDecorator","option","render","_fieldDecoratorOption"],"mappings":"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","file":"js/chunk-vendors~d2958a6d.62f91662.js","sourcesContent":["import _typeof from 'babel-runtime/helpers/typeof';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport intersperse from 'intersperse';\nimport PropTypes from '../_util/vue-types';\nimport classNames from 'classnames';\nimport find from 'lodash/find';\nimport Row from '../grid/Row';\nimport Col, { ColProps } from '../grid/Col';\nimport warning from '../_util/warning';\nimport { FIELD_META_PROP, FIELD_DATA_PROP } from './constants';\nimport { initDefaultProps, getComponentFromProp, filterEmpty, getSlotOptions, isValidElement, getAllChildren } from '../_util/props-util';\nimport getTransitionProps from '../_util/getTransitionProps';\nimport BaseMixin from '../_util/BaseMixin';\nimport { cloneElement, cloneVNodes } from '../_util/vnode';\nimport Icon from '../icon';\n\nfunction noop() {}\nexport var FormItemProps = {\n  id: PropTypes.string,\n  prefixCls: PropTypes.string,\n  label: PropTypes.any,\n  labelCol: PropTypes.shape(ColProps).loose,\n  wrapperCol: PropTypes.shape(ColProps).loose,\n  help: PropTypes.any,\n  extra: PropTypes.any,\n  validateStatus: PropTypes.oneOf(['', 'success', 'warning', 'error', 'validating']),\n  hasFeedback: PropTypes.bool,\n  required: PropTypes.bool,\n  colon: PropTypes.bool,\n  fieldDecoratorId: PropTypes.string,\n  fieldDecoratorOptions: PropTypes.object\n};\nfunction comeFromSlot() {\n  var vnodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var itemVnode = arguments[1];\n\n  var isSlot = false;\n  for (var i = 0, len = vnodes.length; i < len; i++) {\n    var vnode = vnodes[i];\n    if (vnode && (vnode === itemVnode || vnode.$vnode === itemVnode)) {\n      isSlot = true;\n    } else {\n      var children = vnode.componentOptions ? vnode.componentOptions.children : vnode.children;\n      isSlot = comeFromSlot(children, itemVnode);\n    }\n    if (isSlot) {\n      break;\n    }\n  }\n  return isSlot;\n}\n\nexport default {\n  name: 'AFormItem',\n  __ANT_FORM_ITEM: true,\n  mixins: [BaseMixin],\n  props: initDefaultProps(FormItemProps, {\n    hasFeedback: false,\n    prefixCls: 'ant-form',\n    colon: true\n  }),\n  inject: {\n    FormProps: { 'default': function _default() {\n        return {};\n      } },\n    decoratorFormProps: { 'default': function _default() {\n        return {};\n      } },\n    collectFormItemContext: { 'default': function _default() {\n        return noop;\n      } }\n  },\n  data: function data() {\n    return { helpShow: false };\n  },\n  created: function created() {\n    this.collectContext();\n  },\n  beforeUpdate: function beforeUpdate() {\n    if (process.env.NODE_ENV !== 'production') {\n      this.collectContext();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.collectFormItemContext(this.$vnode.context, 'delete');\n  },\n  mounted: function mounted() {\n    warning(this.getControls(this.slotDefault, true).length <= 1, '`Form.Item` cannot generate `validateStatus` and `help` automatically, ' + 'while there are more than one `getFieldDecorator` in it.');\n    warning(!this.fieldDecoratorId, '`fieldDecoratorId` is deprecated. please use `v-decorator={id, options}` instead.');\n  },\n\n  methods: {\n    collectContext: function collectContext() {\n      if (this.FormProps.form && this.FormProps.form.templateContext) {\n        var templateContext = this.FormProps.form.templateContext;\n\n        var vnodes = Object.values(templateContext.$slots || {}).reduce(function (a, b) {\n          return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n        }, []);\n        var isSlot = comeFromSlot(vnodes, this.$vnode);\n        warning(!isSlot, 'You can not set FormItem from slot, please use slot-scope instead slot');\n        var isSlotScope = false;\n        // 进一步判断是否是通过slot-scope传递\n        if (!isSlot && this.$vnode.context !== templateContext) {\n          isSlotScope = comeFromSlot(this.$vnode.context.$children, templateContext.$vnode);\n        }\n        if (!isSlotScope && !isSlot) {\n          this.collectFormItemContext(this.$vnode.context);\n        }\n      }\n    },\n    getHelpMessage: function getHelpMessage() {\n      var help = getComponentFromProp(this, 'help');\n      var onlyControl = this.getOnlyControl();\n      if (help === undefined && onlyControl) {\n        var errors = this.getField().errors;\n        if (errors) {\n          return intersperse(errors.map(function (e, index) {\n            return isValidElement(e.message) ? cloneElement(e.message, { key: index }) : e.message;\n          }), ' ');\n        } else {\n          return '';\n        }\n      }\n\n      return help;\n    },\n    getControls: function getControls() {\n      var childrenArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var recursively = arguments[1];\n\n      var controls = [];\n      for (var i = 0; i < childrenArray.length; i++) {\n        if (!recursively && controls.length > 0) {\n          break;\n        }\n\n        var child = childrenArray[i];\n        if (!child.tag && child.text.trim() === '') {\n          continue;\n        }\n\n        if (getSlotOptions(child).__ANT_FORM_ITEM) {\n          continue;\n        }\n        var children = getAllChildren(child);\n        var attrs = child.data && child.data.attrs || {};\n        if (FIELD_META_PROP in attrs) {\n          // And means FIELD_DATA_PROP in child.props, too.\n          controls.push(child);\n        } else if (children) {\n          controls = controls.concat(this.getControls(children, recursively));\n        }\n      }\n      return controls;\n    },\n    getOnlyControl: function getOnlyControl() {\n      var child = this.getControls(this.slotDefault, false)[0];\n      return child !== undefined ? child : null;\n    },\n    getChildAttr: function getChildAttr(prop) {\n      var child = this.getOnlyControl();\n      var data = {};\n      if (!child) {\n        return undefined;\n      }\n      if (child.data) {\n        data = child.data;\n      } else if (child.$vnode && child.$vnode.data) {\n        data = child.$vnode.data;\n      }\n      return data[prop] || data.attrs[prop];\n    },\n    getId: function getId() {\n      return this.getChildAttr('id');\n    },\n    getMeta: function getMeta() {\n      return this.getChildAttr(FIELD_META_PROP);\n    },\n    getField: function getField() {\n      return this.getChildAttr(FIELD_DATA_PROP);\n    },\n    onHelpAnimEnd: function onHelpAnimEnd(_key, helpShow) {\n      this.helpShow = helpShow;\n      if (!helpShow) {\n        this.$forceUpdate();\n      }\n    },\n    renderHelp: function renderHelp() {\n      var _this = this;\n\n      var h = this.$createElement;\n\n      var prefixCls = this.prefixCls;\n      var help = this.getHelpMessage();\n      var children = help ? h(\n        'div',\n        { 'class': prefixCls + '-explain', key: 'help' },\n        [help]\n      ) : null;\n      if (children) {\n        this.helpShow = !!children;\n      }\n      var transitionProps = getTransitionProps('show-help', {\n        afterEnter: function afterEnter() {\n          return _this.onHelpAnimEnd('help', true);\n        },\n        afterLeave: function afterLeave() {\n          return _this.onHelpAnimEnd('help', false);\n        }\n      });\n      return h(\n        'transition',\n        _mergeJSXProps([transitionProps, { key: 'help' }]),\n        [children]\n      );\n    },\n    renderExtra: function renderExtra() {\n      var h = this.$createElement;\n      var prefixCls = this.prefixCls;\n\n      var extra = getComponentFromProp(this, 'extra');\n      return extra ? h(\n        'div',\n        { 'class': prefixCls + '-extra' },\n        [extra]\n      ) : null;\n    },\n    getValidateStatus: function getValidateStatus() {\n      var onlyControl = this.getOnlyControl();\n      if (!onlyControl) {\n        return '';\n      }\n      var field = this.getField();\n      if (field.validating) {\n        return 'validating';\n      }\n      if (field.errors) {\n        return 'error';\n      }\n      var fieldValue = 'value' in field ? field.value : this.getMeta().initialValue;\n      if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {\n        return 'success';\n      }\n      return '';\n    },\n    renderValidateWrapper: function renderValidateWrapper(c1, c2, c3) {\n      var h = this.$createElement;\n\n      var props = this.$props;\n      var onlyControl = this.getOnlyControl;\n      var validateStatus = props.validateStatus === undefined && onlyControl ? this.getValidateStatus() : props.validateStatus;\n\n      var classes = props.prefixCls + '-item-control';\n      if (validateStatus) {\n        classes = classNames(props.prefixCls + '-item-control', {\n          'has-feedback': props.hasFeedback || validateStatus === 'validating',\n          'has-success': validateStatus === 'success',\n          'has-warning': validateStatus === 'warning',\n          'has-error': validateStatus === 'error',\n          'is-validating': validateStatus === 'validating'\n        });\n      }\n      var iconType = '';\n      switch (validateStatus) {\n        case 'success':\n          iconType = 'check-circle';\n          break;\n        case 'warning':\n          iconType = 'exclamation-circle';\n          break;\n        case 'error':\n          iconType = 'close-circle';\n          break;\n        case 'validating':\n          iconType = 'loading';\n          break;\n        default:\n          iconType = '';\n          break;\n      }\n      var icon = props.hasFeedback && iconType ? h(\n        'span',\n        { 'class': props.prefixCls + '-item-children-icon' },\n        [h(Icon, {\n          attrs: { type: iconType, theme: iconType === 'loading' ? 'outlined' : 'filled' }\n        })]\n      ) : null;\n      return h(\n        'div',\n        { 'class': classes },\n        [h(\n          'span',\n          { 'class': props.prefixCls + '-item-children' },\n          [c1, icon]\n        ), c2, c3]\n      );\n    },\n    renderWrapper: function renderWrapper(children) {\n      var h = this.$createElement;\n      var prefixCls = this.prefixCls,\n          _wrapperCol = this.wrapperCol,\n          wrapperCol = _wrapperCol === undefined ? {} : _wrapperCol;\n\n      var cls = wrapperCol['class'],\n          style = wrapperCol.style,\n          id = wrapperCol.id,\n          on = wrapperCol.on,\n          restProps = _objectWithoutProperties(wrapperCol, ['class', 'style', 'id', 'on']);\n\n      var className = classNames(prefixCls + '-item-control-wrapper', cls);\n      var colProps = {\n        props: restProps,\n        'class': className,\n        key: 'wrapper',\n        style: style,\n        id: id,\n        on: on\n      };\n      return h(\n        Col,\n        colProps,\n        [children]\n      );\n    },\n    isRequired: function isRequired() {\n      var required = this.required;\n\n      if (required !== undefined) {\n        return required;\n      }\n      if (this.getOnlyControl()) {\n        var meta = this.getMeta() || {};\n        var validate = meta.validate || [];\n\n        return validate.filter(function (item) {\n          return !!item.rules;\n        }).some(function (item) {\n          return item.rules.some(function (rule) {\n            return rule.required;\n          });\n        });\n      }\n      return false;\n    },\n\n\n    // Resolve duplicated ids bug between different forms\n    // https://github.com/ant-design/ant-design/issues/7351\n    onLabelClick: function onLabelClick(e) {\n      var label = getComponentFromProp(this, 'label');\n      var id = this.id || this.getId();\n      if (!id) {\n        return;\n      }\n      var controls = document.querySelectorAll('[id=\"' + id + '\"]');\n      if (controls.length !== 1) {\n        // Only prevent in default situation\n        // Avoid preventing event in `label={<a href=\"xx\">link</a>}``\n        if (typeof label === 'string') {\n          e.preventDefault();\n        }\n        var control = this.$el.querySelector('[id=\"' + id + '\"]');\n        if (control && control.focus) {\n          control.focus();\n        }\n      }\n    },\n    renderLabel: function renderLabel() {\n      var h = this.$createElement;\n      var prefixCls = this.prefixCls,\n          _labelCol = this.labelCol,\n          labelCol = _labelCol === undefined ? {} : _labelCol,\n          colon = this.colon,\n          id = this.id;\n\n      var label = getComponentFromProp(this, 'label');\n      var required = this.isRequired();\n\n      var labelColClass = labelCol['class'],\n          labelColStyle = labelCol.style,\n          labelColId = labelCol.id,\n          on = labelCol.on,\n          restProps = _objectWithoutProperties(labelCol, ['class', 'style', 'id', 'on']);\n\n      var labelColClassName = classNames(prefixCls + '-item-label', labelColClass);\n      var labelClassName = classNames(_defineProperty({}, prefixCls + '-item-required', required));\n\n      var labelChildren = label;\n      // Keep label is original where there should have no colon\n      var haveColon = colon && this.FormProps.layout !== 'vertical';\n      // Remove duplicated user input colon\n      if (haveColon && typeof label === 'string' && label.trim() !== '') {\n        labelChildren = label.replace(/[：|:]\\s*$/, '');\n      }\n      var colProps = {\n        props: restProps,\n        'class': labelColClassName,\n        key: 'label',\n        style: labelColStyle,\n        id: labelColId,\n        on: on\n      };\n\n      return label ? h(\n        Col,\n        colProps,\n        [h(\n          'label',\n          {\n            attrs: {\n              'for': id || this.getId(),\n\n              title: typeof label === 'string' ? label : ''\n            },\n            'class': labelClassName, on: {\n              'click': this.onLabelClick\n            }\n          },\n          [labelChildren]\n        )]\n      ) : null;\n    },\n    renderChildren: function renderChildren() {\n      return [this.renderLabel(), this.renderWrapper(this.renderValidateWrapper(this.slotDefault, this.renderHelp(), this.renderExtra()))];\n    },\n    renderFormItem: function renderFormItem(children) {\n      var _itemClassName;\n\n      var h = this.$createElement;\n\n      var props = this.$props;\n      var prefixCls = props.prefixCls;\n      var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, prefixCls + '-item', true), _defineProperty(_itemClassName, prefixCls + '-item-with-help', this.helpShow), _defineProperty(_itemClassName, prefixCls + '-item-no-colon', !props.colon), _itemClassName);\n\n      return h(\n        Row,\n        { 'class': classNames(itemClassName) },\n        [children]\n      );\n    },\n    decoratorOption: function decoratorOption(vnode) {\n      if (vnode.data && vnode.data.directives) {\n        var directive = find(vnode.data.directives, ['name', 'decorator']);\n        warning(!directive || directive && Array.isArray(directive.value), 'Invalid directive: type check failed for directive \"decorator\". Expected Array, got ' + _typeof(directive ? directive.value : directive) + '. At ' + vnode.tag + '.');\n        return directive ? directive.value : null;\n      } else {\n        return null;\n      }\n    },\n    decoratorChildren: function decoratorChildren(vnodes) {\n      var FormProps = this.FormProps;\n\n      var getFieldDecorator = FormProps.form.getFieldDecorator;\n      for (var i = 0, len = vnodes.length; i < len; i++) {\n        var vnode = vnodes[i];\n        if (getSlotOptions(vnode).__ANT_FORM_ITEM) {\n          break;\n        }\n        if (vnode.children) {\n          vnode.children = this.decoratorChildren(cloneVNodes(vnode.children));\n        } else if (vnode.componentOptions && vnode.componentOptions.children) {\n          vnode.componentOptions.children = this.decoratorChildren(cloneVNodes(vnode.componentOptions.children));\n        }\n        var option = this.decoratorOption(vnode);\n        if (option && option[0]) {\n          vnodes[i] = getFieldDecorator(option[0], option[1])(vnode);\n        }\n      }\n      return vnodes;\n    }\n  },\n\n  render: function render() {\n    var $slots = this.$slots,\n        decoratorFormProps = this.decoratorFormProps,\n        fieldDecoratorId = this.fieldDecoratorId,\n        _fieldDecoratorOption = this.fieldDecoratorOptions,\n        fieldDecoratorOptions = _fieldDecoratorOption === undefined ? {} : _fieldDecoratorOption,\n        FormProps = this.FormProps;\n\n    var child = filterEmpty($slots['default'] || []);\n    if (decoratorFormProps.form && fieldDecoratorId && child.length) {\n      var getFieldDecorator = decoratorFormProps.form.getFieldDecorator;\n      child[0] = getFieldDecorator(fieldDecoratorId, fieldDecoratorOptions)(child[0]);\n      warning(!(child.length > 1), '`autoFormCreate` just `decorator` then first children. but you can use JSX to support multiple children');\n      this.slotDefault = child;\n    } else if (FormProps.form) {\n      child = cloneVNodes(child);\n      this.slotDefault = this.decoratorChildren(child);\n    } else {\n      this.slotDefault = child;\n    }\n\n    var children = this.renderChildren();\n    return this.renderFormItem(children);\n  }\n};"],"sourceRoot":""}