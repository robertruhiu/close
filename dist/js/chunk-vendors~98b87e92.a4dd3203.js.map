{"version":3,"sources":["webpack:///./node_modules/lodash/_equalArrays.js"],"names":["SetCache","__webpack_require__","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","stacked","get","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push","module","exports"],"mappings":"2GAAA,IAAAA,EAAeC,EAAQ,QACvBC,EAAgBD,EAAQ,QACxBE,EAAeF,EAAQ,QAGvBG,EAAA,EACAC,EAAA,EAeA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,EAAAL,EACAU,EAAAP,EAAAQ,OACAC,EAAAR,EAAAO,OAEA,GAAAD,GAAAE,KAAAH,GAAAG,EAAAF,GACA,SAGA,IAAAG,EAAAL,EAAAM,IAAAX,GACA,GAAAU,GAAAL,EAAAM,IAAAV,GACA,OAAAS,GAAAT,EAEA,IAAAW,GAAA,EACAC,GAAA,EACAC,EAAAZ,EAAAJ,EAAA,IAAAL,OAAAsB,EAEAV,EAAAW,IAAAhB,EAAAC,GACAI,EAAAW,IAAAf,EAAAD,GAGA,QAAAY,EAAAL,EAAA,CACA,IAAAU,EAAAjB,EAAAY,GACAM,EAAAjB,EAAAW,GAEA,GAAAT,EACA,IAAAgB,EAAAb,EACAH,EAAAe,EAAAD,EAAAL,EAAAX,EAAAD,EAAAK,GACAF,EAAAc,EAAAC,EAAAN,EAAAZ,EAAAC,EAAAI,GAEA,QAAAU,IAAAI,EAAA,CACA,GAAAA,EACA,SAEAN,GAAA,EACA,MAGA,GAAAC,GACA,IAAAnB,EAAAM,EAAA,SAAAiB,EAAAE,GACA,IAAAxB,EAAAkB,EAAAM,KACAH,IAAAC,GAAAd,EAAAa,EAAAC,EAAAhB,EAAAC,EAAAE,IACA,OAAAS,EAAAO,KAAAD,KAEW,CACXP,GAAA,EACA,YAEK,GACLI,IAAAC,IACAd,EAAAa,EAAAC,EAAAhB,EAAAC,EAAAE,GACA,CACAQ,GAAA,EACA,OAKA,OAFAR,EAAA,UAAAL,GACAK,EAAA,UAAAJ,GACAY,EAGAS,EAAAC,QAAAxB","file":"js/chunk-vendors~98b87e92.a4dd3203.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"],"sourceRoot":""}