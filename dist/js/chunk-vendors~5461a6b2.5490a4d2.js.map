{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/_util/wave.js"],"names":["_css_animation_Event__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_util_raf__WEBPACK_IMPORTED_MODULE_1__","styleForPesudo","isHidden","element","offsetParent","__webpack_exports__","name","props","mounted","_this","this","$nextTick","node","$el","nodeType","instance","bindAnimationEvent","beforeDestroy","cancel","clickWaveTimeoutId","clearTimeout","destroy","methods","isNotGrey","color","match","onClick","waveColor","className","indexOf","removeExtraStyleNode","insertExtraNode","$props","extraNode","document","createElement","attributeName","getAttributeName","removeAttribute","setAttribute","test","style","borderColor","innerHTML","body","contains","appendChild","addStartEventListener","onTransitionStart","addEndEventListener","onTransitionEnd","_this2","getAttribute","e","target","tagName","resetEffect","getComputedStyle","getPropertyValue","window","setTimeout","animationStartId","animationStart","Object","addEventListener","removeEventListener","Element","removeChild","removeStartEventListener","removeEndEventListener","animationName","render","$slots"],"mappings":"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","file":"js/chunk-vendors~5461a6b2.5490a4d2.js","sourcesContent":["import TransitionEvents from './css-animation/Event';\nimport raf from '../_util/raf';\nvar styleForPesudo = void 0;\n\n// Where el is the DOM element you'd like to test for visibility\nfunction isHidden(element) {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n  return !element || element.offsetParent === null;\n}\n\nexport default {\n  name: 'Wave',\n  props: ['insertExtraNode'],\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      var node = _this.$el;\n      if (node.nodeType !== 1) {\n        return;\n      }\n      _this.instance = _this.bindAnimationEvent(node);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.instance) {\n      this.instance.cancel();\n    }\n    if (this.clickWaveTimeoutId) {\n      clearTimeout(this.clickWaveTimeoutId);\n    }\n    this.destroy = true;\n  },\n\n  methods: {\n    isNotGrey: function isNotGrey(color) {\n      var match = (color || '').match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n      if (match && match[1] && match[2] && match[3]) {\n        return !(match[1] === match[2] && match[2] === match[3]);\n      }\n      return true;\n    },\n    onClick: function onClick(node, waveColor) {\n      if (!node || isHidden(node) || node.className.indexOf('-leave') >= 0) {\n        return;\n      }\n      this.removeExtraStyleNode();\n      var insertExtraNode = this.$props.insertExtraNode;\n\n      this.extraNode = document.createElement('div');\n      var extraNode = this.extraNode;\n      extraNode.className = 'ant-click-animating-node';\n      var attributeName = this.getAttributeName();\n      node.removeAttribute(attributeName);\n      node.setAttribute(attributeName, 'true');\n      // Not white or transparnt or grey\n      styleForPesudo = styleForPesudo || document.createElement('style');\n      if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && this.isNotGrey(waveColor) && !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(waveColor) && // any transparent rgba color\n      waveColor !== 'transparent') {\n        extraNode.style.borderColor = waveColor;\n\n        styleForPesudo.innerHTML = '[ant-click-animating-without-extra-node]:after { border-color: ' + waveColor + '; }';\n        if (!document.body.contains(styleForPesudo)) {\n          document.body.appendChild(styleForPesudo);\n        }\n      }\n      if (insertExtraNode) {\n        node.appendChild(extraNode);\n      }\n      TransitionEvents.addStartEventListener(node, this.onTransitionStart);\n      TransitionEvents.addEndEventListener(node, this.onTransitionEnd);\n    },\n    bindAnimationEvent: function bindAnimationEvent(node) {\n      var _this2 = this;\n\n      if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) {\n        return;\n      }\n      var onClick = function onClick(e) {\n        // Fix radio button click twice\n        if (e.target.tagName === 'INPUT' || isHidden(e.target)) {\n          return;\n        }\n        _this2.resetEffect(node);\n        // Get wave color from target\n        var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || // Firefox Compatible\n        getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');\n        _this2.clickWaveTimeoutId = window.setTimeout(function () {\n          return _this2.onClick(node, waveColor);\n        }, 0);\n        raf.cancel(_this2.animationStartId);\n        _this2.animationStart = true;\n\n        // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.\n        _this2.animationStartId = raf(function () {\n          _this2.animationStart = false;\n        }, 10);\n      };\n      node.addEventListener('click', onClick, true);\n      return {\n        cancel: function cancel() {\n          node.removeEventListener('click', onClick, true);\n        }\n      };\n    },\n    getAttributeName: function getAttributeName() {\n      var insertExtraNode = this.$props.insertExtraNode;\n\n      return insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n    },\n    resetEffect: function resetEffect(node) {\n      if (!node || node === this.extraNode || !(node instanceof Element)) {\n        return;\n      }\n      var insertExtraNode = this.$props.insertExtraNode;\n\n      var attributeName = this.getAttributeName();\n      node.removeAttribute(attributeName);\n      this.removeExtraStyleNode();\n      if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {\n        node.removeChild(this.extraNode);\n      }\n      TransitionEvents.removeStartEventListener(node, this.onTransitionStart);\n      TransitionEvents.removeEndEventListener(node, this.onTransitionEnd);\n    },\n    onTransitionStart: function onTransitionStart(e) {\n      if (this.destroy) return;\n\n      var node = this.$el;\n      if (!e || e.target !== node) {\n        return;\n      }\n\n      if (!this.animationStart) {\n        this.resetEffect(node);\n      }\n    },\n    onTransitionEnd: function onTransitionEnd(e) {\n      if (!e || e.animationName !== 'fadeEffect') {\n        return;\n      }\n      this.resetEffect(e.target);\n    },\n    removeExtraStyleNode: function removeExtraStyleNode() {\n      if (styleForPesudo) {\n        styleForPesudo.innerHTML = '';\n      }\n    }\n  },\n\n  render: function render() {\n    return this.$slots['default'] && this.$slots['default'][0];\n  }\n};"],"sourceRoot":""}