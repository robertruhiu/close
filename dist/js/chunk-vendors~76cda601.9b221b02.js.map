{"version":3,"sources":["webpack:///./node_modules/lodash/_equalObjects.js"],"names":["getAllKeys","__webpack_require__","COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","objLength","length","othProps","othLength","index","key","call","stacked","get","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor","module","exports"],"mappings":"2GAAA,IAAAA,EAAiBC,EAAQ,QAGzBC,EAAA,EAGAC,EAAAC,OAAAC,UAGAC,EAAAH,EAAAG,eAeA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,EAAAR,EACAa,EAAAf,EAAAQ,GACAQ,EAAAD,EAAAE,OACAC,EAAAlB,EAAAS,GACAU,EAAAD,EAAAD,OAEA,GAAAD,GAAAG,IAAAL,EACA,SAEA,IAAAM,EAAAJ,EACA,MAAAI,IAAA,CACA,IAAAC,EAAAN,EAAAK,GACA,KAAAN,EAAAO,KAAAZ,EAAAH,EAAAgB,KAAAb,EAAAY,IACA,SAIA,IAAAE,EAAAV,EAAAW,IAAAhB,GACA,GAAAe,GAAAV,EAAAW,IAAAf,GACA,OAAAc,GAAAd,EAEA,IAAAgB,GAAA,EACAZ,EAAAa,IAAAlB,EAAAC,GACAI,EAAAa,IAAAjB,EAAAD,GAEA,IAAAmB,EAAAb,EACA,QAAAM,EAAAJ,EAAA,CACAK,EAAAN,EAAAK,GACA,IAAAQ,EAAApB,EAAAa,GACAQ,EAAApB,EAAAY,GAEA,GAAAV,EACA,IAAAmB,EAAAhB,EACAH,EAAAkB,EAAAD,EAAAP,EAAAZ,EAAAD,EAAAK,GACAF,EAAAiB,EAAAC,EAAAR,EAAAb,EAAAC,EAAAI,GAGA,UAAAkB,IAAAD,EACAF,IAAAC,GAAAjB,EAAAgB,EAAAC,EAAAnB,EAAAC,EAAAE,GACAiB,GACA,CACAL,GAAA,EACA,MAEAE,MAAA,eAAAN,GAEA,GAAAI,IAAAE,EAAA,CACA,IAAAK,EAAAxB,EAAAyB,YACAC,EAAAzB,EAAAwB,YAGAD,GAAAE,GACA,gBAAA1B,GAAA,gBAAAC,KACA,mBAAAuB,mBACA,mBAAAE,qBACAT,GAAA,GAKA,OAFAZ,EAAA,UAAAL,GACAK,EAAA,UAAAJ,GACAgB,EAGAU,EAAAC,QAAA7B","file":"js/chunk-vendors~76cda601.9b221b02.js","sourcesContent":["var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n"],"sourceRoot":""}