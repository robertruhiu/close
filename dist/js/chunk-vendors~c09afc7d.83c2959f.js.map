{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.constructor.js"],"names":["global","__webpack_require__","inheritIfRequired","dP","f","gOPN","isRegExp","$flags","$RegExp","RegExp","Base","proto","prototype","re1","re2","CORRECT_NEW","p","tiRE","this","piRE","fiU","undefined","constructor","source","call","proxy","key","configurable","get","set","it","keys","i","length"],"mappings":"6GAAA,IAAAA,EAAaC,EAAQ,QACrBC,EAAwBD,EAAQ,QAChCE,EAASF,EAAQ,QAAcG,EAC/BC,EAAWJ,EAAQ,QAAgBG,EACnCE,EAAeL,EAAQ,QACvBM,EAAaN,EAAQ,QACrBO,EAAAR,EAAAS,OACAC,EAAAF,EACAG,EAAAH,EAAAI,UACAC,EAAA,KACAC,EAAA,KAEAC,EAAA,IAAAP,EAAAK,OAEA,GAAIZ,EAAQ,WAAgBc,GAAsBd,EAAQ,OAARA,CAAkB,WAGpE,OAFAa,EAAMb,EAAQ,OAARA,CAAgB,aAEtBO,EAAAK,OAAAL,EAAAM,OAAA,QAAAN,EAAAK,EAAA,QACC,CACDL,EAAA,SAAAQ,EAAAZ,GACA,IAAAa,EAAAC,gBAAAV,EACAW,EAAAb,EAAAU,GACAI,OAAAC,IAAAjB,EACA,OAAAa,GAAAE,GAAAH,EAAAM,cAAAd,GAAAY,EAAAJ,EACAd,EAAAa,EACA,IAAAL,EAAAS,IAAAC,EAAAJ,EAAAO,OAAAP,EAAAZ,GACAM,GAAAS,EAAAH,aAAAR,GAAAQ,EAAAO,OAAAP,EAAAG,GAAAC,EAAAb,EAAAiB,KAAAR,GAAAZ,GACAa,EAAAC,KAAAP,EAAAH,IASA,IAPA,IAAAiB,EAAA,SAAAC,GACAA,KAAAlB,GAAAL,EAAAK,EAAAkB,EAAA,CACAC,cAAA,EACAC,IAAA,WAAwB,OAAAlB,EAAAgB,IACxBG,IAAA,SAAAC,GAA0BpB,EAAAgB,GAAAI,MAG1BC,EAAA1B,EAAAK,GAAAsB,EAAA,EAAoCD,EAAAE,OAAAD,GAAiBP,EAAAM,EAAAC,MACrDrB,EAAAW,YAAAd,EACAA,EAAAI,UAAAD,EACEV,EAAQ,OAARA,CAAqBD,EAAA,SAAAQ,GAGvBP,EAAQ,OAARA,CAAwB","file":"js/chunk-vendors~c09afc7d.83c2959f.js","sourcesContent":["var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n"],"sourceRoot":""}