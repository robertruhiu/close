{"version":3,"sources":["webpack:///./node_modules/component-classes/index.js"],"names":["index","__webpack_require__","err","re","toString","Object","prototype","ClassList","el","nodeType","Error","this","list","classList","module","exports","add","name","arr","array","i","push","className","join","remove","call","removeMatching","splice","length","test","toggle","force","has","getAttribute","str","replace","split","shift","contains"],"mappings":"6GAIA,IACA,IAAAA,EAAcC,EAAQ,QACrB,MAAAC,GACDF,EAAcC,EAAQ,QAOtB,IAAAE,EAAA,MAMAC,EAAAC,OAAAC,UAAAF,SAqBA,SAAAG,EAAAC,GACA,IAAAA,MAAAC,SACA,UAAAC,MAAA,uCAEAC,KAAAH,KACAG,KAAAC,KAAAJ,EAAAK,UAhBAC,EAAAC,QAAA,SAAAP,GACA,WAAAD,EAAAC,IA0BAD,EAAAD,UAAAU,IAAA,SAAAC,GAEA,GAAAN,KAAAC,KAEA,OADAD,KAAAC,KAAAI,IAAAC,GACAN,KAIA,IAAAO,EAAAP,KAAAQ,QACAC,EAAApB,EAAAkB,EAAAD,GAGA,OAFAG,GAAAF,EAAAG,KAAAJ,GACAN,KAAAH,GAAAc,UAAAJ,EAAAK,KAAA,KACAZ,MAaAJ,EAAAD,UAAAkB,OAAA,SAAAP,GACA,sBAAAb,EAAAqB,KAAAR,GACA,OAAAN,KAAAe,eAAAT,GAIA,GAAAN,KAAAC,KAEA,OADAD,KAAAC,KAAAY,OAAAP,GACAN,KAIA,IAAAO,EAAAP,KAAAQ,QACAC,EAAApB,EAAAkB,EAAAD,GAGA,OAFAG,GAAAF,EAAAS,OAAAP,EAAA,GACAT,KAAAH,GAAAc,UAAAJ,EAAAK,KAAA,KACAZ,MAWAJ,EAAAD,UAAAoB,eAAA,SAAAvB,GAEA,IADA,IAAAe,EAAAP,KAAAQ,QACAC,EAAA,EAAiBA,EAAAF,EAAAU,OAAgBR,IACjCjB,EAAA0B,KAAAX,EAAAE,KACAT,KAAAa,OAAAN,EAAAE,IAGA,OAAAT,MAeAJ,EAAAD,UAAAwB,OAAA,SAAAb,EAAAc,GAEA,OAAApB,KAAAC,MACA,qBAAAmB,EACAA,IAAApB,KAAAC,KAAAkB,OAAAb,EAAAc,IACApB,KAAAC,KAAAkB,OAAAb,GAGAN,KAAAC,KAAAkB,OAAAb,GAEAN,OAIA,qBAAAoB,EACAA,EAGApB,KAAAK,IAAAC,GAFAN,KAAAa,OAAAP,GAKAN,KAAAqB,IAAAf,GACAN,KAAAa,OAAAP,GAEAN,KAAAK,IAAAC,GAIAN,OAUAJ,EAAAD,UAAAa,MAAA,WACA,IAAAG,EAAAX,KAAAH,GAAAyB,aAAA,aACAC,EAAAZ,EAAAa,QAAA,iBACAjB,EAAAgB,EAAAE,MAAAjC,GAEA,MADA,KAAAe,EAAA,IAAAA,EAAAmB,QACAnB,GAWAX,EAAAD,UAAA0B,IACAzB,EAAAD,UAAAgC,SAAA,SAAArB,GACA,OAAAN,KAAAC,KACAD,KAAAC,KAAA0B,SAAArB,MACAjB,EAAAW,KAAAQ,QAAAF","file":"js/chunk-vendors~aba152a0.145c722f.js","sourcesContent":["/**\n * Module dependencies.\n */\n\ntry {\n  var index = require('indexof');\n} catch (err) {\n  var index = require('component-indexof');\n}\n\n/**\n * Whitespace regexp.\n */\n\nvar re = /\\s+/;\n\n/**\n * toString reference.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nmodule.exports = function(el){\n  return new ClassList(el);\n};\n\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n  this.el = el;\n  this.list = el.classList;\n}\n\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.add = function(name){\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.remove = function(name){\n  if ('[object RegExp]' == toString.call(name)) {\n    return this.removeMatching(name);\n  }\n\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Remove all classes matching `re`.\n *\n * @param {RegExp} re\n * @return {ClassList}\n * @api private\n */\n\nClassList.prototype.removeMatching = function(re){\n  var arr = this.array();\n  for (var i = 0; i < arr.length; i++) {\n    if (re.test(arr[i])) {\n      this.remove(arr[i]);\n    }\n  }\n  return this;\n};\n\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.toggle = function(name, force){\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n    return this;\n  }\n\n  // fallback\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\nClassList.prototype.array = function(){\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.has =\nClassList.prototype.contains = function(name){\n  return this.list\n    ? this.list.contains(name)\n    : !! ~index(this.array(), name);\n};\n"],"sourceRoot":""}