{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-time-picker/TimePicker.js"],"names":["_util_vue_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_1__","_vc_trigger__WEBPACK_IMPORTED_MODULE_2__","_Panel__WEBPACK_IMPORTED_MODULE_3__","_placements__WEBPACK_IMPORTED_MODULE_4__","moment__WEBPACK_IMPORTED_MODULE_5__","moment__WEBPACK_IMPORTED_MODULE_5___default","n","_util_props_util__WEBPACK_IMPORTED_MODULE_6__","noop","__webpack_exports__","name","mixins","props","Object","prefixCls","string","clearText","value","any","defaultOpenValue","type","default","inputReadOnly","bool","disabled","allowEmpty","defaultValue","open","defaultOpen","align","object","placement","transitionName","getPopupContainer","func","placeholder","format","showHour","showMinute","showSecond","popupClassName","disabledHours","disabledMinutes","disabledSeconds","hideDisabledOptions","autoComplete","use12Hours","hourStep","number","minuteStep","secondStep","focusOnOpen","autoFocus","id","inputIcon","clearIcon","addon","data","this","_open","undefined","_value","sOpen","sValue","watch","val","setState","mounted","_this","$nextTick","focus","methods","onPanelChange","setValue","onPanelClear","setOpen","onVisibleChange","onEsc","onKeyDown","e","keyCode","onKeyDown2","__emit","getFormat","fmtString","filter","item","join","concat","getPanelElement","h","$createElement","attrs","ref","on","change","clear","esc","keydown","getPopupClassName","selectColumnCount","$refs","picker","blur","onFocus","onBlur","render","arguments","popupAlign","builtinPlacements","popupPlacement","action","destroyPopupOnHide","popupTransitionName","popupVisible","popupVisibleChange","slot","class","readOnly","domProps"],"mappings":"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","file":"js/chunk-vendors~62d72203.117dd440.js","sourcesContent":["import PropTypes from '../_util/vue-types';\nimport BaseMixin from '../_util/BaseMixin';\nimport Trigger from '../vc-trigger';\nimport Panel from './Panel';\nimport placements from './placements';\nimport moment from 'moment';\nimport { initDefaultProps, hasProp, getComponentFromProp } from '../_util/props-util';\n\nfunction noop() {}\n\nexport default {\n  name: 'VcTimePicker',\n  mixins: [BaseMixin],\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    clearText: PropTypes.string,\n    value: PropTypes.any,\n    defaultOpenValue: {\n      type: Object,\n      'default': function _default() {\n        return moment();\n      }\n    },\n    inputReadOnly: PropTypes.bool,\n    disabled: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    defaultValue: PropTypes.any,\n    open: PropTypes.bool,\n    defaultOpen: PropTypes.bool,\n    align: PropTypes.object,\n    placement: PropTypes.any,\n    transitionName: PropTypes.string,\n    getPopupContainer: PropTypes.func,\n    placeholder: PropTypes.string,\n    format: PropTypes.string,\n    showHour: PropTypes.bool,\n    showMinute: PropTypes.bool,\n    showSecond: PropTypes.bool,\n    popupClassName: PropTypes.string,\n    disabledHours: PropTypes.func,\n    disabledMinutes: PropTypes.func,\n    disabledSeconds: PropTypes.func,\n    hideDisabledOptions: PropTypes.bool,\n    // onChange: PropTypes.func,\n    // onOpen: PropTypes.func,\n    // onClose: PropTypes.func,\n    // onFocus: PropTypes.func,\n    // onBlur: PropTypes.func,\n    name: PropTypes.string,\n    autoComplete: PropTypes.string,\n    use12Hours: PropTypes.bool,\n    hourStep: PropTypes.number,\n    minuteStep: PropTypes.number,\n    secondStep: PropTypes.number,\n    focusOnOpen: PropTypes.bool,\n    // onKeyDown: PropTypes.func,\n    autoFocus: PropTypes.bool,\n    id: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    addon: PropTypes.func\n  }, {\n    clearText: 'clear',\n    prefixCls: 'rc-time-picker',\n    defaultOpen: false,\n    inputReadOnly: false,\n    popupClassName: '',\n    align: {},\n    id: '',\n    allowEmpty: true,\n    showHour: true,\n    showMinute: true,\n    showSecond: true,\n    disabledHours: noop,\n    disabledMinutes: noop,\n    disabledSeconds: noop,\n    hideDisabledOptions: false,\n    placement: 'bottomLeft',\n    use12Hours: false,\n    focusOnOpen: false\n  }),\n  data: function data() {\n    var defaultOpen = this.defaultOpen,\n        defaultValue = this.defaultValue,\n        _open = this.open,\n        open = _open === undefined ? defaultOpen : _open,\n        _value = this.value,\n        value = _value === undefined ? defaultValue : _value;\n\n    return {\n      sOpen: open,\n      sValue: value\n    };\n  },\n\n\n  watch: {\n    value: function value(val) {\n      this.setState({\n        sValue: val\n      });\n    },\n    open: function open(val) {\n      if (val !== undefined) {\n        this.setState({\n          sOpen: val\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      if (_this.autoFocus) {\n        _this.focus();\n      }\n    });\n  },\n\n  methods: {\n    onPanelChange: function onPanelChange(value) {\n      this.setValue(value);\n    },\n    onPanelClear: function onPanelClear() {\n      this.setValue(null);\n      this.setOpen(false);\n    },\n    onVisibleChange: function onVisibleChange(open) {\n      this.setOpen(open);\n    },\n    onEsc: function onEsc() {\n      this.setOpen(false);\n      this.focus();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.keyCode === 40) {\n        this.setOpen(true);\n      }\n    },\n    onKeyDown2: function onKeyDown2(e) {\n      this.__emit('keydown', e);\n    },\n    setValue: function setValue(value) {\n      if (!hasProp(this, 'value')) {\n        this.setState({\n          sValue: value\n        });\n      }\n      this.__emit('change', value);\n    },\n    getFormat: function getFormat() {\n      var format = this.format,\n          showHour = this.showHour,\n          showMinute = this.showMinute,\n          showSecond = this.showSecond,\n          use12Hours = this.use12Hours;\n\n      if (format) {\n        return format;\n      }\n\n      if (use12Hours) {\n        var fmtString = [showHour ? 'h' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {\n          return !!item;\n        }).join(':');\n\n        return fmtString.concat(' a');\n      }\n\n      return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {\n        return !!item;\n      }).join(':');\n    },\n    getPanelElement: function getPanelElement() {\n      var h = this.$createElement;\n      var prefixCls = this.prefixCls,\n          placeholder = this.placeholder,\n          disabledHours = this.disabledHours,\n          addon = this.addon,\n          disabledMinutes = this.disabledMinutes,\n          disabledSeconds = this.disabledSeconds,\n          hideDisabledOptions = this.hideDisabledOptions,\n          inputReadOnly = this.inputReadOnly,\n          allowEmpty = this.allowEmpty,\n          showHour = this.showHour,\n          showMinute = this.showMinute,\n          showSecond = this.showSecond,\n          defaultOpenValue = this.defaultOpenValue,\n          clearText = this.clearText,\n          use12Hours = this.use12Hours,\n          focusOnOpen = this.focusOnOpen,\n          onKeyDown2 = this.onKeyDown2,\n          hourStep = this.hourStep,\n          minuteStep = this.minuteStep,\n          secondStep = this.secondStep,\n          sValue = this.sValue;\n\n      var clearIcon = getComponentFromProp(this, 'clearIcon');\n      return h(Panel, {\n        attrs: {\n          clearText: clearText,\n          prefixCls: prefixCls + '-panel',\n\n          value: sValue,\n          inputReadOnly: inputReadOnly,\n\n          defaultOpenValue: defaultOpenValue,\n          showHour: showHour,\n          showMinute: showMinute,\n          showSecond: showSecond,\n\n          allowEmpty: allowEmpty,\n          format: this.getFormat(),\n          placeholder: placeholder,\n          disabledHours: disabledHours,\n          disabledMinutes: disabledMinutes,\n          disabledSeconds: disabledSeconds,\n          hideDisabledOptions: hideDisabledOptions,\n          use12Hours: use12Hours,\n          hourStep: hourStep,\n          minuteStep: minuteStep,\n          secondStep: secondStep,\n          focusOnOpen: focusOnOpen,\n\n          clearIcon: clearIcon,\n          addon: addon\n        },\n        ref: 'panel', on: {\n          'change': this.onPanelChange,\n          'clear': this.onPanelClear,\n          'esc': this.onEsc,\n          'keydown': onKeyDown2\n        }\n      });\n    },\n    getPopupClassName: function getPopupClassName() {\n      var showHour = this.showHour,\n          showMinute = this.showMinute,\n          showSecond = this.showSecond,\n          use12Hours = this.use12Hours,\n          prefixCls = this.prefixCls;\n\n      var popupClassName = this.popupClassName;\n      // Keep it for old compatibility\n      if ((!showHour || !showMinute || !showSecond) && !use12Hours) {\n        popupClassName += ' ' + prefixCls + '-panel-narrow';\n      }\n      var selectColumnCount = 0;\n      if (showHour) {\n        selectColumnCount += 1;\n      }\n      if (showMinute) {\n        selectColumnCount += 1;\n      }\n      if (showSecond) {\n        selectColumnCount += 1;\n      }\n      if (use12Hours) {\n        selectColumnCount += 1;\n      }\n      popupClassName += ' ' + prefixCls + '-panel-column-' + selectColumnCount;\n      return popupClassName;\n    },\n    setOpen: function setOpen(open) {\n      if (this.sOpen !== open) {\n        if (!hasProp(this, 'open')) {\n          this.setState({ sOpen: open });\n        }\n        if (open) {\n          this.__emit('open', { open: open });\n        } else {\n          this.__emit('close', { open: open });\n        }\n      }\n    },\n    focus: function focus() {\n      this.$refs.picker.focus();\n    },\n    blur: function blur() {\n      this.$refs.picker.blur();\n    },\n    onFocus: function onFocus(e) {\n      this.__emit('focus', e);\n    },\n    onBlur: function onBlur(e) {\n      this.__emit('blur', e);\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var prefixCls = this.prefixCls,\n        placeholder = this.placeholder,\n        placement = this.placement,\n        align = this.align,\n        id = this.id,\n        disabled = this.disabled,\n        transitionName = this.transitionName,\n        getPopupContainer = this.getPopupContainer,\n        name = this.name,\n        autoComplete = this.autoComplete,\n        autoFocus = this.autoFocus,\n        inputReadOnly = this.inputReadOnly,\n        sOpen = this.sOpen,\n        sValue = this.sValue,\n        onFocus = this.onFocus,\n        onBlur = this.onBlur;\n\n    var popupClassName = this.getPopupClassName();\n    var inputIcon = getComponentFromProp(this, 'inputIcon');\n    return h(\n      Trigger,\n      {\n        attrs: {\n          prefixCls: prefixCls + '-panel',\n          popupClassName: popupClassName,\n          popupAlign: align,\n          builtinPlacements: placements,\n          popupPlacement: placement,\n          action: disabled ? [] : ['click'],\n          destroyPopupOnHide: true,\n          getPopupContainer: getPopupContainer,\n          popupTransitionName: transitionName,\n          popupVisible: sOpen\n        },\n        on: {\n          'popupVisibleChange': this.onVisibleChange\n        }\n      },\n      [h(\n        'template',\n        { slot: 'popup' },\n        [this.getPanelElement()]\n      ), h(\n        'span',\n        { 'class': '' + prefixCls },\n        [h('input', {\n          'class': prefixCls + '-input',\n          ref: 'picker',\n          attrs: { type: 'text',\n            placeholder: placeholder,\n            name: name,\n\n            disabled: disabled,\n\n            autoComplete: autoComplete,\n\n            autoFocus: autoFocus,\n            readOnly: !!inputReadOnly,\n            id: id\n          },\n          on: {\n            'keydown': this.onKeyDown,\n            'focus': onFocus,\n            'blur': onBlur\n          },\n          domProps: {\n            'value': sValue && sValue.format(this.getFormat()) || ''\n          }\n        }), inputIcon || h('span', { 'class': prefixCls + '-icon' })]\n      )]\n    );\n  }\n};"],"sourceRoot":""}