{"version":3,"sources":["webpack:///./node_modules/lodash/_baseMergeDeep.js"],"names":["assignMergeValue","__webpack_require__","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set","module","exports"],"mappings":"6GAAA,IAAAA,EAAuBC,EAAQ,QAC/BC,EAAkBD,EAAQ,QAC1BE,EAAsBF,EAAQ,QAC9BG,EAAgBH,EAAQ,QACxBI,EAAsBJ,EAAQ,QAC9BK,EAAkBL,EAAQ,QAC1BM,EAAcN,EAAQ,QACtBO,EAAwBP,EAAQ,QAChCQ,EAAeR,EAAQ,QACvBS,EAAiBT,EAAQ,QACzBU,EAAeV,EAAQ,QACvBW,EAAoBX,EAAQ,QAC5BY,EAAmBZ,EAAQ,QAC3Ba,EAAcb,EAAQ,QACtBc,EAAoBd,EAAQ,QAiB5B,SAAAe,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAV,EAAAG,EAAAE,GACAM,EAAAX,EAAAI,EAAAC,GACAO,EAAAH,EAAAI,IAAAF,GAEA,GAAAC,EACA1B,EAAAiB,EAAAE,EAAAO,OADA,CAIA,IAAAE,EAAAN,EACAA,EAAAE,EAAAC,EAAAN,EAAA,GAAAF,EAAAC,EAAAK,QACAM,EAEAC,OAAAD,IAAAD,EAEA,GAAAE,EAAA,CACA,IAAAC,EAAAxB,EAAAkB,GACAO,GAAAD,GAAAtB,EAAAgB,GACAQ,GAAAF,IAAAC,GAAAnB,EAAAY,GAEAG,EAAAH,EACAM,GAAAC,GAAAC,EACA1B,EAAAiB,GACAI,EAAAJ,EAEAhB,EAAAgB,GACAI,EAAAxB,EAAAoB,GAEAQ,GACAF,GAAA,EACAF,EAAA1B,EAAAuB,GAAA,IAEAQ,GACAH,GAAA,EACAF,EAAAzB,EAAAsB,GAAA,IAGAG,EAAA,GAGAhB,EAAAa,IAAAnB,EAAAmB,IACAG,EAAAJ,EACAlB,EAAAkB,GACAI,EAAAb,EAAAS,GAEAb,EAAAa,KAAAd,EAAAc,KACAI,EAAAvB,EAAAoB,KAIAK,GAAA,EAGAA,IAEAP,EAAAW,IAAAT,EAAAG,GACAP,EAAAO,EAAAH,EAAAL,EAAAE,EAAAC,GACAA,EAAA,UAAAE,IAEAzB,EAAAiB,EAAAE,EAAAS,IAGAO,EAAAC,QAAApB","file":"js/chunk-vendors~74177aa5.cb44d88b.js","sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"],"sourceRoot":""}