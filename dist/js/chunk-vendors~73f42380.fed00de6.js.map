{"version":3,"sources":["webpack:///./node_modules/youtube-player/node_modules/debug/src/browser.js"],"names":["process","useColors","window","type","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatArgs","args","this","namespace","exports","humanize","diff","c","color","splice","index","lastC","replace","log","Function","prototype","apply","call","arguments","save","namespaces","storage","removeItem","debug","e","load","r","Object","VUE_APP_CLI_UI_URL","NODE_ENV","BASE_URL","DEBUG","localstorage","localStorage","module","__webpack_require__","chrome","local","colors","formatters","j","v","JSON","stringify","err","message","enable"],"mappings":"4GAAA,SAAAA,GAsCA,SAAAC,IAIA,6BAAAC,gBAAAF,SAAA,aAAAE,OAAAF,QAAAG,QAMA,qBAAAC,mBAAAC,iBAAAD,SAAAC,gBAAAC,OAAAF,SAAAC,gBAAAC,MAAAC,kBAEA,qBAAAL,eAAAM,UAAAN,OAAAM,QAAAC,SAAAP,OAAAM,QAAAE,WAAAR,OAAAM,QAAAG,QAGA,qBAAAC,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAC,MAAA,mBAAAC,SAAAC,OAAAC,GAAA,SAEA,qBAAAN,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAC,MAAA,uBAsBA,SAAAI,EAAAC,GACA,IAAAnB,EAAAoB,KAAApB,UASA,GAPAmB,EAAA,IAAAnB,EAAA,SACAoB,KAAAC,WACArB,EAAA,WACAmB,EAAA,IACAnB,EAAA,WACA,IAAAsB,EAAAC,SAAAH,KAAAI,MAEAxB,EAAA,CAEA,IAAAyB,EAAA,UAAAL,KAAAM,MACAP,EAAAQ,OAAA,IAAAF,EAAA,kBAKA,IAAAG,EAAA,EACAC,EAAA,EACAV,EAAA,GAAAW,QAAA,uBAAAhB,GACA,OAAAA,IACAc,IACA,OAAAd,IAGAe,EAAAD,MAIAT,EAAAQ,OAAAE,EAAA,EAAAJ,IAUA,SAAAM,IAGA,wBAAAxB,SACAA,QAAAwB,KACAC,SAAAC,UAAAC,MAAAC,KAAA5B,QAAAwB,IAAAxB,QAAA6B,WAUA,SAAAC,EAAAC,GACA,IACA,MAAAA,EACAhB,EAAAiB,QAAAC,WAAA,SAEAlB,EAAAiB,QAAAE,MAAAH,EAEG,MAAAI,KAUH,SAAAC,IACA,IAAAC,EACA,IACAA,EAAAtB,EAAAiB,QAAAE,MACG,MAAAC,IAOH,OAJAE,GAAA,qBAAA7C,GAAA,QAAAA,IACA6C,EAAQC,OAAA,CAAAC,mBAAA,GAAAC,SAAA,aAAAC,SAAA,MAAWC,OAGnBL,EAoBA,SAAAM,IACA,IACA,OAAAjD,OAAAkD,aACG,MAAAT,KAjLHpB,EAAA8B,EAAA9B,QAA2B+B,EAAQ,QACnC/B,EAAAS,MACAT,EAAAJ,aACAI,EAAAe,OACAf,EAAAqB,OACArB,EAAAtB,YACAsB,EAAAiB,QAAA,oBAAAe,QACA,oBAAAA,OAAAf,QACAe,OAAAf,QAAAgB,MACAL,IAMA5B,EAAAkC,OAAA,CACA,gBACA,cACA,YACA,aACA,aACA,WAmCAlC,EAAAmC,WAAAC,EAAA,SAAAC,GACA,IACA,OAAAC,KAAAC,UAAAF,GACG,MAAAG,GACH,qCAAAA,EAAAC,UAqGAzC,EAAA0C,OAAArB","file":"js/chunk-vendors~73f42380.fed00de6.js","sourcesContent":["/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n"],"sourceRoot":""}