{"version":3,"sources":["webpack:///./node_modules/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test","module","exports"],"mappings":"yGACA,IAAAA,EAAA,iBAGAC,EAAA,mBAUA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,SAAAF,EAGA,OAFAC,EAAA,MAAAA,EAAAJ,EAAAI,IAEAA,IACA,UAAAC,GACA,UAAAA,GAAAJ,EAAAK,KAAAH,KACAA,GAAA,GAAAA,EAAA,MAAAA,EAAAC,EAGAG,EAAAC,QAAAN","file":"js/chunk-vendors~12110a93.e36f8d65.js","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"],"sourceRoot":""}