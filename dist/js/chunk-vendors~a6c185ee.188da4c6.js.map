{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-select/SelectTrigger.js"],"names":["babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_vc_trigger__WEBPACK_IMPORTED_MODULE_3__","_util_vue_types__WEBPACK_IMPORTED_MODULE_4__","_DropdownMenu__WEBPACK_IMPORTED_MODULE_5__","_util__WEBPACK_IMPORTED_MODULE_6__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_7__","BUILT_IN_PLACEMENTS","bottomLeft","points","offset","overflow","adjustX","adjustY","topLeft","__webpack_exports__","name","mixins","props","dropdownMatchSelectWidth","bool","defaultActiveFirstOption","dropdownAlign","object","visible","disabled","showSearch","dropdownClassName","string","dropdownStyle","dropdownMenuStyle","multiple","inputValue","filterOption","any","options","prefixCls","popupClassName","value","array","showAction","arrayOf","combobox","animation","transitionName","getPopupContainer","func","backfillValue","menuItemSelectedIcon","dropdownRender","ariaId","data","dropdownWidth","created","this","saveDropdownMenuRef","Object","saveTriggerRef","mounted","_this","$nextTick","setDropdownWidth","updated","_this2","methods","width","$el","offsetWidth","setState","getInnerMenu","dropdownMenuRef","$refs","menuRef","getPopupDOMNode","triggerRef","getPopupDomNode","getDropdownElement","newProps","h","$createElement","firstActiveValue","getDropdownPrefixCls","_$listeners","$listeners","menuSelect","menuDeselect","popupScroll","$props","dropdownMenuProps","on","directives","menuNode","getDropdownTransitionName","render","_popupClassName","arguments","$slots","mouseenter","mouseleave","popupFocus","dropdownVisibleChange","dropdownPrefixCls","popupElement","menuItems","hideAction","popupStyle","widthProp","triggerProps","ref","popupPlacement","builtinPlacements","popupTransitionName","popupAlign","popupVisible","popupVisibleChange","slot"],"mappings":"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","file":"js/chunk-vendors~a6c185ee.188da4c6.js","sourcesContent":["import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport classnames from 'classnames';\nimport Trigger from '../vc-trigger';\nimport PropTypes from '../_util/vue-types';\nimport DropdownMenu from './DropdownMenu';\nimport { isSingleMode, saveRef } from './util';\nimport BaseMixin from '../_util/BaseMixin';\n\nvar BUILT_IN_PLACEMENTS = {\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  }\n};\n\nexport default {\n  name: 'SelectTrigger',\n  mixins: [BaseMixin],\n  props: {\n    // onPopupFocus: PropTypes.func,\n    // onPopupScroll: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    defaultActiveFirstOption: PropTypes.bool,\n    dropdownAlign: PropTypes.object,\n    visible: PropTypes.bool,\n    disabled: PropTypes.bool,\n    showSearch: PropTypes.bool,\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownMenuStyle: PropTypes.object,\n    multiple: PropTypes.bool,\n    inputValue: PropTypes.string,\n    filterOption: PropTypes.any,\n    options: PropTypes.any,\n    prefixCls: PropTypes.string,\n    popupClassName: PropTypes.string,\n    value: PropTypes.array,\n    // children: PropTypes.any,\n    showAction: PropTypes.arrayOf(PropTypes.string),\n    combobox: PropTypes.bool,\n    animation: PropTypes.string,\n    transitionName: PropTypes.string,\n    getPopupContainer: PropTypes.func,\n    backfillValue: PropTypes.any,\n    menuItemSelectedIcon: PropTypes.any,\n    dropdownRender: PropTypes.func,\n    ariaId: PropTypes.string\n  },\n  data: function data() {\n    return {\n      dropdownWidth: 0\n    };\n  },\n  created: function created() {\n    this.saveDropdownMenuRef = saveRef(this, 'dropdownMenuRef');\n    this.saveTriggerRef = saveRef(this, 'triggerRef');\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.setDropdownWidth();\n    });\n  },\n  updated: function updated() {\n    var _this2 = this;\n\n    this.$nextTick(function () {\n      _this2.setDropdownWidth();\n    });\n  },\n\n  methods: {\n    setDropdownWidth: function setDropdownWidth() {\n      var width = this.$el.offsetWidth;\n      if (width !== this.dropdownWidth) {\n        this.setState({ dropdownWidth: width });\n      }\n    },\n    getInnerMenu: function getInnerMenu() {\n      return this.dropdownMenuRef && this.dropdownMenuRef.$refs.menuRef;\n    },\n    getPopupDOMNode: function getPopupDOMNode() {\n      return this.triggerRef.getPopupDomNode();\n    },\n    getDropdownElement: function getDropdownElement(newProps) {\n      var h = this.$createElement;\n      var value = this.value,\n          firstActiveValue = this.firstActiveValue,\n          defaultActiveFirstOption = this.defaultActiveFirstOption,\n          dropdownMenuStyle = this.dropdownMenuStyle,\n          getDropdownPrefixCls = this.getDropdownPrefixCls,\n          backfillValue = this.backfillValue,\n          menuItemSelectedIcon = this.menuItemSelectedIcon;\n      var _$listeners = this.$listeners,\n          menuSelect = _$listeners.menuSelect,\n          menuDeselect = _$listeners.menuDeselect,\n          popupScroll = _$listeners.popupScroll;\n\n      var props = this.$props;\n\n      var dropdownRender = props.dropdownRender,\n          ariaId = props.ariaId;\n\n      var dropdownMenuProps = {\n        props: _extends({}, newProps.props, {\n          ariaId: ariaId,\n          prefixCls: getDropdownPrefixCls(),\n          value: value,\n          firstActiveValue: firstActiveValue,\n          defaultActiveFirstOption: defaultActiveFirstOption,\n          dropdownMenuStyle: dropdownMenuStyle,\n          backfillValue: backfillValue,\n          menuItemSelectedIcon: menuItemSelectedIcon\n        }),\n        on: _extends({}, newProps.on, {\n          menuSelect: menuSelect,\n          menuDeselect: menuDeselect,\n          popupScroll: popupScroll\n        }),\n        directives: [{\n          name: 'ant-ref',\n          value: this.saveDropdownMenuRef\n        }]\n      };\n      var menuNode = h(DropdownMenu, dropdownMenuProps);\n\n      if (dropdownRender) {\n        return dropdownRender(menuNode, props);\n      }\n      return null;\n    },\n    getDropdownTransitionName: function getDropdownTransitionName() {\n      var props = this.$props;\n      var transitionName = props.transitionName;\n      if (!transitionName && props.animation) {\n        transitionName = this.getDropdownPrefixCls() + '-' + props.animation;\n      }\n      return transitionName;\n    },\n    getDropdownPrefixCls: function getDropdownPrefixCls() {\n      return this.prefixCls + '-dropdown';\n    }\n  },\n\n  render: function render() {\n    var _popupClassName;\n\n    var h = arguments[0];\n    var $props = this.$props,\n        $slots = this.$slots,\n        $listeners = this.$listeners;\n    var multiple = $props.multiple,\n        visible = $props.visible,\n        inputValue = $props.inputValue,\n        dropdownAlign = $props.dropdownAlign,\n        disabled = $props.disabled,\n        showSearch = $props.showSearch,\n        dropdownClassName = $props.dropdownClassName,\n        dropdownStyle = $props.dropdownStyle,\n        dropdownMatchSelectWidth = $props.dropdownMatchSelectWidth,\n        options = $props.options,\n        getPopupContainer = $props.getPopupContainer,\n        showAction = $props.showAction;\n    var mouseenter = $listeners.mouseenter,\n        mouseleave = $listeners.mouseleave,\n        popupFocus = $listeners.popupFocus,\n        dropdownVisibleChange = $listeners.dropdownVisibleChange;\n\n    var dropdownPrefixCls = this.getDropdownPrefixCls();\n    var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, dropdownClassName, !!dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);\n    var popupElement = this.getDropdownElement({\n      props: {\n        menuItems: options,\n        multiple: multiple,\n        inputValue: inputValue,\n        visible: visible\n      },\n      on: {\n        popupFocus: popupFocus\n      }\n    });\n    var hideAction = void 0;\n    if (disabled) {\n      hideAction = [];\n    } else if (isSingleMode($props) && !showSearch) {\n      hideAction = ['click'];\n    } else {\n      hideAction = ['blur'];\n    }\n    var popupStyle = _extends({}, dropdownStyle);\n    var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';\n    if (this.dropdownWidth) {\n      popupStyle[widthProp] = this.dropdownWidth + 'px';\n    }\n    var triggerProps = {\n      props: _extends({}, $props, {\n        showAction: disabled ? [] : showAction,\n        hideAction: hideAction,\n        ref: 'triggerRef',\n        popupPlacement: 'bottomLeft',\n        builtinPlacements: BUILT_IN_PLACEMENTS,\n        prefixCls: dropdownPrefixCls,\n        popupTransitionName: this.getDropdownTransitionName(),\n        popupAlign: dropdownAlign,\n        popupVisible: visible,\n        getPopupContainer: getPopupContainer,\n        popupClassName: classnames(popupClassName),\n        popupStyle: popupStyle\n      }),\n      on: {\n        popupVisibleChange: dropdownVisibleChange\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.saveTriggerRef\n      }]\n    };\n    if (mouseenter) {\n      triggerProps.on.mouseenter = mouseenter;\n    }\n    if (mouseleave) {\n      triggerProps.on.mouseleave = mouseleave;\n    }\n    return h(\n      Trigger,\n      triggerProps,\n      [$slots['default'], h(\n        'template',\n        { slot: 'popup' },\n        [popupElement]\n      )]\n    );\n  }\n};"],"sourceRoot":""}