{"version":3,"sources":["webpack:///./node_modules/async-validator/es/index.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_typeof","Symbol","iterator","obj","constructor","_util","__webpack_require__","_validator","_validator2","_interopRequireDefault","_messages2","__esModule","default","Schema","descriptor","this","rules","_messages","messages","define","deepMerge","newMessages","Error","Array","isArray","z","item","validate","source_","_this","o","undefined","oc","options","callback","keys","Promise","resolve","complete","results","errors","fields","add","e","_errors","concat","apply","push","convertFieldsError","arr","series","forEach","r","rule","transform","validator","getValidationMethod","field","fullField","type","getType","errorFields","asyncMap","data","doIt","deep","defaultField","addFullfield","schema","cb","suppressWarning","warning","message","map","complementError","first","required","error","format","fieldsSchema","k","f","fieldSchema","bind","errs","finalErrors","res","asyncValidator","then","pattern","RegExp","messageIndex","indexOf","splice","register"],"mappings":"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","file":"js/chunk-vendors~9161a349.b3658e70.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _util = require('./util');\n\nvar _validator = require('./validator/');\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nvar _messages2 = require('./messages');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\nfunction Schema(descriptor) {\n  this.rules = null;\n  this._messages = _messages2.messages;\n  this.define(descriptor);\n}\n\nSchema.prototype = {\n  messages: function messages(_messages) {\n    if (_messages) {\n      this._messages = (0, _util.deepMerge)((0, _messages2.newMessages)(), _messages);\n    }\n    return this._messages;\n  },\n  define: function define(rules) {\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n    if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n    this.rules = {};\n    var z = void 0;\n    var item = void 0;\n    for (z in rules) {\n      if (rules.hasOwnProperty(z)) {\n        item = rules[z];\n        this.rules[z] = Array.isArray(item) ? item : [item];\n      }\n    }\n  },\n  validate: function validate(source_) {\n    var _this = this;\n\n    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var oc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n\n    var source = source_;\n    var options = o;\n    var callback = oc;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback();\n      }\n      return Promise.resolve();\n    }\n\n    function complete(results) {\n      var i = void 0;\n      var errors = [];\n      var fields = {};\n\n      function add(e) {\n        if (Array.isArray(e)) {\n          var _errors;\n\n          errors = (_errors = errors).concat.apply(_errors, e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n      if (!errors.length) {\n        errors = null;\n        fields = null;\n      } else {\n        fields = (0, _util.convertFieldsError)(errors);\n      }\n      callback(errors, fields);\n    }\n\n    if (options.messages) {\n      var messages = this.messages();\n      if (messages === _messages2.messages) {\n        messages = (0, _messages2.newMessages)();\n      }\n      (0, _util.deepMerge)(messages, options.messages);\n      options.messages = messages;\n    } else {\n      options.messages = this.messages();\n    }\n    var arr = void 0;\n    var value = void 0;\n    var series = {};\n    var keys = options.keys || Object.keys(this.rules);\n    keys.forEach(function (z) {\n      arr = _this.rules[z];\n      value = source[z];\n      arr.forEach(function (r) {\n        var rule = r;\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = _extends({}, source);\n          }\n          value = source[z] = rule.transform(value);\n        }\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule\n          };\n        } else {\n          rule = _extends({}, rule);\n        }\n        rule.validator = _this.getValidationMethod(rule);\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = _this.getType(rule);\n        if (!rule.validator) {\n          return;\n        }\n        series[z] = series[z] || [];\n        series[z].push({\n          rule: rule,\n          value: value,\n          source: source,\n          field: z\n        });\n      });\n    });\n    var errorFields = {};\n    return (0, _util.asyncMap)(series, options, function (data, doIt) {\n      var rule = data.rule;\n      var deep = (rule.type === 'object' || rule.type === 'array') && (_typeof(rule.fields) === 'object' || _typeof(rule.defaultField) === 'object');\n      deep = deep && (rule.required || !rule.required && data.value);\n      rule.field = data.field;\n\n      function addFullfield(key, schema) {\n        return _extends({}, schema, {\n          fullField: rule.fullField + '.' + key\n        });\n      }\n\n      function cb() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var errors = e;\n        if (!Array.isArray(errors)) {\n          errors = [errors];\n        }\n        if (!options.suppressWarning && errors.length) {\n          Schema.warning('async-validator:', errors);\n        }\n        if (errors.length && rule.message) {\n          errors = [].concat(rule.message);\n        }\n\n        errors = errors.map((0, _util.complementError)(rule));\n\n        if (options.first && errors.length) {\n          errorFields[rule.field] = 1;\n          return doIt(errors);\n        }\n        if (!deep) {\n          doIt(errors);\n        } else {\n          // if rule is required but the target object\n          // does not exist fail at the rule level and don't\n          // go deeper\n          if (rule.required && !data.value) {\n            if (rule.message) {\n              errors = [].concat(rule.message).map((0, _util.complementError)(rule));\n            } else if (options.error) {\n              errors = [options.error(rule, (0, _util.format)(options.messages.required, rule.field))];\n            } else {\n              errors = [];\n            }\n            return doIt(errors);\n          }\n\n          var fieldsSchema = {};\n          if (rule.defaultField) {\n            for (var k in data.value) {\n              if (data.value.hasOwnProperty(k)) {\n                fieldsSchema[k] = rule.defaultField;\n              }\n            }\n          }\n          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);\n          for (var f in fieldsSchema) {\n            if (fieldsSchema.hasOwnProperty(f)) {\n              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];\n              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));\n            }\n          }\n          var schema = new Schema(fieldsSchema);\n          schema.messages(options.messages);\n          if (data.rule.options) {\n            data.rule.options.messages = options.messages;\n            data.rule.options.error = options.error;\n          }\n          schema.validate(data.value, data.rule.options || options, function (errs) {\n            var finalErrors = [];\n            if (errors && errors.length) {\n              finalErrors.push.apply(finalErrors, errors);\n            }\n            if (errs && errs.length) {\n              finalErrors.push.apply(finalErrors, errs);\n            }\n            doIt(finalErrors.length ? finalErrors : null);\n          });\n        }\n      }\n\n      var res = void 0;\n      if (rule.asyncValidator) {\n        res = rule.asyncValidator(rule, data.value, cb, data.source, options);\n      } else if (rule.validator) {\n        res = rule.validator(rule, data.value, cb, data.source, options);\n        if (res === true) {\n          cb();\n        } else if (res === false) {\n          cb(rule.message || rule.field + ' fails');\n        } else if (res instanceof Array) {\n          cb(res);\n        } else if (res instanceof Error) {\n          cb(res.message);\n        }\n      }\n      if (res && res.then) {\n        res.then(function () {\n          return cb();\n        }, function (e) {\n          return cb(e);\n        });\n      }\n    }, function (results) {\n      complete(results);\n    });\n  },\n  getType: function getType(rule) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n    if (typeof rule.validator !== 'function' && rule.type && !_validator2['default'].hasOwnProperty(rule.type)) {\n      throw new Error((0, _util.format)('Unknown rule type %s', rule.type));\n    }\n    return rule.type || 'string';\n  },\n  getValidationMethod: function getValidationMethod(rule) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n    var keys = Object.keys(rule);\n    var messageIndex = keys.indexOf('message');\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n    if (keys.length === 1 && keys[0] === 'required') {\n      return _validator2['default'].required;\n    }\n    return _validator2['default'][this.getType(rule)] || false;\n  }\n};\n\nSchema.register = function register(type, validator) {\n  if (typeof validator !== 'function') {\n    throw new Error('Cannot register a validator by type, validator is not a function');\n  }\n  _validator2['default'][type] = validator;\n};\n\nSchema.warning = _util.warning;\n\nSchema.messages = _messages2.messages;\n\nexports['default'] = Schema;"],"sourceRoot":""}