{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/dropdown/dropdown-button.js"],"names":["babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_helper_vue_jsx_merge_props__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default","_button__WEBPACK_IMPORTED_MODULE_3__","_button_buttonTypes__WEBPACK_IMPORTED_MODULE_4__","_button_button_group__WEBPACK_IMPORTED_MODULE_5__","_dropdown__WEBPACK_IMPORTED_MODULE_6__","_util_vue_types__WEBPACK_IMPORTED_MODULE_7__","_util_props_util__WEBPACK_IMPORTED_MODULE_8__","_getDropdownProps__WEBPACK_IMPORTED_MODULE_9__","ButtonTypesProps","Object","DropdownProps","ButtonGroup","Group","DropdownButtonProps","type","oneOf","def","htmlType","disabled","bool","prefixCls","string","placement","__webpack_exports__","name","model","prop","event","props","provide","savePopupRef","this","inject","configProvider","default","methods","ref","popupRef","onClick","e","$emit","onVisibleChange","val","render","h","arguments","_$props","$props","trigger","align","visible","getPopupContainer","restProps","getContextPopupContainer","dropdownProps","on","visibleChange","class","attrs","click","$slots","slot","icon"],"mappings":"0HAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,QAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,QAAAM,EAAAN,EAAAE,EAAAG,GAAAE,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAAAW,EAAAX,EAAA,QAAAY,EAAAZ,EAAA,QAAAa,EAAAb,EAAA,QAUAc,EAAuBC,OAAAP,EAAA,KAAAO,GACvBC,EAAoBD,OAAAF,EAAA,KAAAE,GACpBE,EAAkBV,EAAA,KAAMW,MACxBC,EAA0Bb,IAAQ,GAAKG,EAAA,KAAgBO,EAAA,CACvDI,KAAQT,EAAA,KAASU,MAAA,iDAAAC,IAAA,WACjBC,SAAAT,EAAAS,SACAC,SAAYb,EAAA,KAASc,KACrBC,UAAaf,EAAA,KAASgB,OAAAL,IAAA,uBACtBM,UAAAZ,EAAAY,UAAAN,IAAA,iBAGeO,EAAA,MACfC,KAAA,kBACAC,MAAA,CACAC,KAAA,UACAC,MAAA,iBAEAC,MAAAf,EACAgB,QAAA,WACA,OACAC,aAAAC,KAAAD,eAIAE,OAAA,CACAC,eAAA,CAAqBC,QAAA,WACrB,YAGAC,QAAA,CACAL,aAAA,SAAAM,GACAL,KAAAM,SAAAD,GAEAE,QAAA,SAAAC,GACAR,KAAAS,MAAA,QAAAD,IAEAE,gBAAA,SAAAC,GACAX,KAAAS,MAAA,gBAAAE,KAGAC,OAAA,WACA,IAAAC,EAAAC,UAAA,GAEAC,EAAAf,KAAAgB,OACAjC,EAAAgC,EAAAhC,KACAI,EAAA4B,EAAA5B,SACAD,EAAA6B,EAAA7B,SACAG,EAAA0B,EAAA1B,UACA4B,EAAAF,EAAAE,QACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,QACA5B,EAAAwB,EAAAxB,UACA6B,EAAAL,EAAAK,kBACAC,EAAoBtD,IAAwBgD,EAAA,wGAE5CO,EAAAtB,KAAAE,eAAAkB,kBAEAG,EAAA,CACA1B,MAAA,CACAqB,QACA/B,WACA8B,QAAA9B,EAAA,GAAA8B,EACA1B,YACA6B,qBAAAE,GAEAE,GAAA,CACAC,cAAAzB,KAAAU,kBAOA,OAJQhC,OAAAH,EAAA,KAAAG,CAAOsB,KAAA,aACfuB,EAAA1B,MAAAsB,WAGAN,EACAjC,EACMhB,IAAc,CAAAyD,EAAA,CAAcK,MAAArC,KAClC,CAAAwB,EACQ3C,EAAA,KACR,CACAyD,MAAA,CAAkB5C,OAAAI,WAAAD,YAClBsC,GAAA,CACAI,MAAA5B,KAAAO,UAGA,CAAAP,KAAA6B,OAAA,aACAhB,EACQxC,EAAA,KACRkD,EACA,CAAAV,EACA,WACA,CAAWiB,KAAA,WACX,CAAWpD,OAAAH,EAAA,KAAAG,CAAoBsB,KAAA,aAC/Ba,EAAa3C,EAAA,KAAM,CACnByD,MAAA,CAAkB5C,OAAAI,WAAA4C,KAAA","file":"js/chunk-vendors~a15a603b.5610413a.js","sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport Button from '../button';\nimport buttonTypes from '../button/buttonTypes';\nimport { ButtonGroupProps } from '../button/button-group';\nimport Dropdown from './dropdown';\nimport PropTypes from '../_util/vue-types';\nimport { hasProp, getComponentFromProp } from '../_util/props-util';\nimport getDropdownProps from './getDropdownProps';\nvar ButtonTypesProps = buttonTypes();\nvar DropdownProps = getDropdownProps();\nvar ButtonGroup = Button.Group;\nvar DropdownButtonProps = _extends({}, ButtonGroupProps, DropdownProps, {\n  type: PropTypes.oneOf(['primary', 'ghost', 'dashed', 'danger', 'default']).def('default'),\n  htmlType: ButtonTypesProps.htmlType,\n  disabled: PropTypes.bool,\n  prefixCls: PropTypes.string.def('ant-dropdown-button'),\n  placement: DropdownProps.placement.def('bottomRight')\n});\nexport { DropdownButtonProps };\nexport default {\n  name: 'ADropdownButton',\n  model: {\n    prop: 'visible',\n    event: 'visibleChange'\n  },\n  props: DropdownButtonProps,\n  provide: function provide() {\n    return {\n      savePopupRef: this.savePopupRef\n    };\n  },\n\n  inject: {\n    configProvider: { 'default': function _default() {\n        return {};\n      } }\n  },\n  methods: {\n    savePopupRef: function savePopupRef(ref) {\n      this.popupRef = ref;\n    },\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n    },\n    onVisibleChange: function onVisibleChange(val) {\n      this.$emit('visibleChange', val);\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n\n    var _$props = this.$props,\n        type = _$props.type,\n        disabled = _$props.disabled,\n        htmlType = _$props.htmlType,\n        prefixCls = _$props.prefixCls,\n        trigger = _$props.trigger,\n        align = _$props.align,\n        visible = _$props.visible,\n        placement = _$props.placement,\n        getPopupContainer = _$props.getPopupContainer,\n        restProps = _objectWithoutProperties(_$props, ['type', 'disabled', 'htmlType', 'prefixCls', 'trigger', 'align', 'visible', 'placement', 'getPopupContainer']);\n\n    var getContextPopupContainer = this.configProvider.getPopupContainer;\n\n    var dropdownProps = {\n      props: {\n        align: align,\n        disabled: disabled,\n        trigger: disabled ? [] : trigger,\n        placement: placement,\n        getPopupContainer: getPopupContainer || getContextPopupContainer\n      },\n      on: {\n        visibleChange: this.onVisibleChange\n      }\n    };\n    if (hasProp(this, 'visible')) {\n      dropdownProps.props.visible = visible;\n    }\n\n    return h(\n      ButtonGroup,\n      _mergeJSXProps([restProps, { 'class': prefixCls }]),\n      [h(\n        Button,\n        {\n          attrs: { type: type, disabled: disabled, htmlType: htmlType },\n          on: {\n            'click': this.onClick\n          }\n        },\n        [this.$slots['default']]\n      ), h(\n        Dropdown,\n        dropdownProps,\n        [h(\n          'template',\n          { slot: 'overlay' },\n          [getComponentFromProp(this, 'overlay')]\n        ), h(Button, {\n          attrs: { type: type, disabled: disabled, icon: 'ellipsis' }\n        })]\n      )]\n    );\n  }\n};"],"sourceRoot":""}