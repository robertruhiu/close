{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-form/src/createBaseForm.js"],"names":["babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_3__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_3___default","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default","async_validator__WEBPACK_IMPORTED_MODULE_5__","async_validator__WEBPACK_IMPORTED_MODULE_5___default","lodash_get__WEBPACK_IMPORTED_MODULE_7__","lodash_get__WEBPACK_IMPORTED_MODULE_7___default","lodash_set__WEBPACK_IMPORTED_MODULE_8__","lodash_set__WEBPACK_IMPORTED_MODULE_8___default","lodash_omit__WEBPACK_IMPORTED_MODULE_9__","lodash_omit__WEBPACK_IMPORTED_MODULE_9___default","_createFieldsStore__WEBPACK_IMPORTED_MODULE_10__","_util_vnode__WEBPACK_IMPORTED_MODULE_11__","_util_BaseMixin__WEBPACK_IMPORTED_MODULE_12__","_util_props_util__WEBPACK_IMPORTED_MODULE_13__","_util_vue_types__WEBPACK_IMPORTED_MODULE_14__","_utils__WEBPACK_IMPORTED_MODULE_15__","DEFAULT_TRIGGER","createBaseForm","option","arguments","length","undefined","mixins","validateMessages","onFieldsChange","onValuesChange","_option$mapProps","mapProps","mapPropsToFields","fieldNameProp","fieldMetaProp","fieldDataProp","_option$formPropName","formPropName","formName","name","_option$props","props","templateContext","WrappedComponent","formProps","Array","isArray","forEach","prop","any","Form","concat","wrappedComponentRef","func","def","data","_this","this","fields","$props","fieldsStore","Object","instances","cachedBind","clearedFieldMetaCache","renderFields","domFields","key","_fieldsStore","apply","submitting","watch","handler","nextProps","updateFields","deep","mounted","cleanUpUselessFields","updated","methods","$forceUpdate","onCollectCommon","action","args","fieldMeta","getFieldMeta","originalProps","_fieldMeta$originalPr","value","getValueFromEvent","getFieldValue","valuesAll","getAllValues","valuesAllSet","keys","field","getField","touched","onCollect","name_","_len","_key","_onCollectCommon","validate","newField","dirty","setFields","onCollectValidate","_len2","_key2","_onCollectCommon2","validateFieldsInternal","options","firstFields","validateFirst","getCacheBind","fn","cache","oriFn","bind","getFieldDecorator","fieldOption","_this2","_getFieldProps","getFieldProps","restProps","fieldElem","originalEvents","newProps","getFieldValuePropValue","domProps","newEvents","on","triggerEvents","_this3","usersFieldOption","Error","trigger","valuePropName","rules","_fieldOption$validate","validateTrigger","initialValue","inputProps","inputListeners","inputAttrs","validateRules","validateTriggers","indexOf","meta","setFieldMeta","attrs","id","directives","saveRef","getFieldInstance","getRules","actionRules","filter","item","map","maybeNestedFields","callback","_this4","flattenRegisteredFields","changedFields","reduce","acc","getNestedAllFields","$nextTick","setFieldsValue","changedValues","fieldsMeta","values","newFields","isRegistered","allValues","_","component","preserve","clearField","recoverClearedField","_this5","fieldList","getAllFieldsName","removedList","resetFields","ns","_this6","names","_ref","_this7","fieldNames","_ref$options","allRules","allFields","alreadyErrors","force","errors","validating","f","getFieldsValue","validator","a","messages","errorsGroup","e","fieldName","fieldErrors","push","expired","nowAllFields","nowField","_ref2","message","validateFields","opt","cb","_this8","pending","Promise","resolve","reject","_getParams","_getParams2","oldCb","getValidFieldsFullName","getValidFieldsName","console","error","isSubmitting","submit","_this9","setState","render","h","$listeners","$slots","getForm","_getOptionProps","wrappedComponentProps","call","ref","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~e93a6c92.49c0320c.js","sourcesContent":["import _typeof from 'babel-runtime/helpers/typeof';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport AsyncValidator from 'async-validator';\nimport warning from 'warning';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport omit from 'lodash/omit';\nimport createFieldsStore from './createFieldsStore';\nimport { cloneElement } from '../../_util/vnode';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { getOptionProps, getEvents, slotHasProp, getComponentName } from '../../_util/props-util';\nimport PropTypes from '../../_util/vue-types';\n\nimport { argumentContainer, identity, normalizeValidateRules, getValidateTriggers, getValueFromEvent, hasRules, getParams, isEmptyObject, flattenArray } from './utils';\n\nvar DEFAULT_TRIGGER = 'change';\n\nfunction createBaseForm() {\n  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var mixins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var validateMessages = option.validateMessages,\n      onFieldsChange = option.onFieldsChange,\n      onValuesChange = option.onValuesChange,\n      _option$mapProps = option.mapProps,\n      mapProps = _option$mapProps === undefined ? identity : _option$mapProps,\n      mapPropsToFields = option.mapPropsToFields,\n      fieldNameProp = option.fieldNameProp,\n      fieldMetaProp = option.fieldMetaProp,\n      fieldDataProp = option.fieldDataProp,\n      _option$formPropName = option.formPropName,\n      formPropName = _option$formPropName === undefined ? 'form' : _option$formPropName,\n      formName = option.name,\n      _option$props = option.props,\n      props = _option$props === undefined ? {} : _option$props,\n      templateContext = option.templateContext;\n\n  return function decorate(WrappedComponent) {\n    var formProps = {};\n    if (Array.isArray(props)) {\n      props.forEach(function (prop) {\n        formProps[prop] = PropTypes.any;\n      });\n    } else {\n      formProps = props;\n    }\n    var Form = {\n      mixins: [BaseMixin].concat(_toConsumableArray(mixins)),\n      props: _extends({}, formProps, {\n        wrappedComponentRef: PropTypes.func.def(function () {})\n      }),\n      data: function data() {\n        var _this = this;\n\n        var fields = mapPropsToFields && mapPropsToFields(this.$props);\n        this.fieldsStore = createFieldsStore(fields || {});\n        this.templateContext = templateContext;\n        this.instances = {};\n        this.cachedBind = {};\n        this.clearedFieldMetaCache = {};\n\n        this.renderFields = {};\n        this.domFields = {};\n\n        // HACK: https://github.com/ant-design/ant-design/issues/6406\n        ['getFieldsValue', 'getFieldValue', 'setFieldsInitialValue', 'getFieldsError', 'getFieldError', 'isFieldValidating', 'isFieldsValidating', 'isFieldsTouched', 'isFieldTouched'].forEach(function (key) {\n          _this[key] = function () {\n            var _fieldsStore;\n\n            return (_fieldsStore = _this.fieldsStore)[key].apply(_fieldsStore, arguments);\n          };\n        });\n\n        return {\n          submitting: false\n        };\n      },\n\n      watch: templateContext ? {} : {\n        $props: {\n          handler: function handler(nextProps) {\n            if (mapPropsToFields) {\n              this.fieldsStore.updateFields(mapPropsToFields(nextProps));\n            }\n          },\n          deep: true\n        }\n      },\n      mounted: function mounted() {\n        this.cleanUpUselessFields();\n      },\n      updated: function updated() {\n        // form updated add for template v-decorator\n        this.cleanUpUselessFields();\n      },\n\n      methods: {\n        updateFields: function updateFields() {\n          var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          this.fieldsStore.updateFields(mapPropsToFields(fields));\n          if (templateContext) {\n            templateContext.$forceUpdate();\n          }\n        },\n        onCollectCommon: function onCollectCommon(name, action, args) {\n          var fieldMeta = this.fieldsStore.getFieldMeta(name);\n          if (fieldMeta[action]) {\n            fieldMeta[action].apply(fieldMeta, _toConsumableArray(args));\n          } else if (fieldMeta.originalProps && fieldMeta.originalProps[action]) {\n            var _fieldMeta$originalPr;\n\n            (_fieldMeta$originalPr = fieldMeta.originalProps)[action].apply(_fieldMeta$originalPr, _toConsumableArray(args));\n          }\n          var value = fieldMeta.getValueFromEvent ? fieldMeta.getValueFromEvent.apply(fieldMeta, _toConsumableArray(args)) : getValueFromEvent.apply(undefined, _toConsumableArray(args));\n          if (onValuesChange && value !== this.fieldsStore.getFieldValue(name)) {\n            var valuesAll = this.fieldsStore.getAllValues();\n            var valuesAllSet = {};\n            valuesAll[name] = value;\n            Object.keys(valuesAll).forEach(function (key) {\n              return set(valuesAllSet, key, valuesAll[key]);\n            });\n            onValuesChange(this, set({}, name, value), valuesAllSet);\n          }\n          var field = this.fieldsStore.getField(name);\n          return { name: name, field: _extends({}, field, { value: value, touched: true }), fieldMeta: fieldMeta };\n        },\n        onCollect: function onCollect(name_, action) {\n          for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n          }\n\n          var _onCollectCommon = this.onCollectCommon(name_, action, args),\n              name = _onCollectCommon.name,\n              field = _onCollectCommon.field,\n              fieldMeta = _onCollectCommon.fieldMeta;\n\n          var validate = fieldMeta.validate;\n\n          var newField = _extends({}, field, {\n            dirty: hasRules(validate)\n          });\n          this.setFields(_defineProperty({}, name, newField));\n        },\n        onCollectValidate: function onCollectValidate(name_, action) {\n          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n\n          var _onCollectCommon2 = this.onCollectCommon(name_, action, args),\n              field = _onCollectCommon2.field,\n              fieldMeta = _onCollectCommon2.fieldMeta;\n\n          var newField = _extends({}, field, {\n            dirty: true\n          });\n          this.validateFieldsInternal([newField], {\n            action: action,\n            options: {\n              firstFields: !!fieldMeta.validateFirst\n            }\n          });\n        },\n        getCacheBind: function getCacheBind(name, action, fn) {\n          if (!this.cachedBind[name]) {\n            this.cachedBind[name] = {};\n          }\n          var cache = this.cachedBind[name];\n          if (!cache[action] || cache[action].oriFn !== fn) {\n            cache[action] = {\n              fn: fn.bind(this, name, action),\n              oriFn: fn\n            };\n          }\n          return cache[action].fn;\n        },\n        getFieldDecorator: function getFieldDecorator(name, fieldOption) {\n          var _this2 = this;\n\n          var _getFieldProps = this.getFieldProps(name, fieldOption),\n              props = _getFieldProps.props,\n              restProps = _objectWithoutProperties(_getFieldProps, ['props']);\n\n          return function (fieldElem) {\n            // We should put field in record if it is rendered\n            _this2.renderFields[name] = true;\n\n            var fieldMeta = _this2.fieldsStore.getFieldMeta(name);\n            var originalProps = getOptionProps(fieldElem);\n            var originalEvents = getEvents(fieldElem);\n            if (process.env.NODE_ENV !== 'production') {\n              var valuePropName = fieldMeta.valuePropName;\n              warning(!slotHasProp(fieldElem, valuePropName), '`getFieldDecorator` will override `' + valuePropName + '`, ' + ('so please don\\'t set `' + valuePropName + ' and v-model` directly ') + 'and use `setFieldsValue` to set it.');\n              warning(!(!slotHasProp(fieldElem, valuePropName) && valuePropName in originalProps && !(fieldOption && fieldOption.initialValue)), getComponentName(fieldElem.componentOptions) + ' `default value` can not collect, ' + ' please use `option.initialValue` to set default value.');\n              var defaultValuePropName = 'default' + valuePropName[0].toUpperCase() + valuePropName.slice(1);\n              warning(!slotHasProp(fieldElem, defaultValuePropName), '`' + defaultValuePropName + '` is invalid ' + ('for `getFieldDecorator` will set `' + valuePropName + '`,') + ' please use `option.initialValue` instead.');\n            }\n            fieldMeta.originalProps = originalProps;\n            // fieldMeta.ref = fieldElem.data && fieldElem.data.ref\n            var newProps = _extends({\n              props: _extends({}, props, _this2.fieldsStore.getFieldValuePropValue(fieldMeta))\n            }, restProps);\n            newProps.domProps.value = newProps.props.value;\n            var newEvents = {};\n            Object.keys(newProps.on).forEach(function (key) {\n              if (originalEvents[key]) {\n                var triggerEvents = newProps.on[key];\n                newEvents[key] = function () {\n                  originalEvents[key].apply(originalEvents, arguments);\n                  triggerEvents.apply(undefined, arguments);\n                };\n              } else {\n                newEvents[key] = newProps.on[key];\n              }\n            });\n            return cloneElement(fieldElem, _extends({}, newProps, { on: newEvents }));\n          };\n        },\n        getFieldProps: function getFieldProps(name) {\n          var _this3 = this;\n\n          var usersFieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          if (!name) {\n            throw new Error('Must call `getFieldProps` with valid name string!');\n          }\n          if (process.env.NODE_ENV !== 'production') {\n            warning(this.fieldsStore.isValidNestedFieldName(name), 'One field name cannot be part of another, e.g. `a` and `a.b`.');\n            warning(!('exclusive' in usersFieldOption), '`option.exclusive` of `getFieldProps`|`getFieldDecorator` had been remove.');\n          }\n\n          delete this.clearedFieldMetaCache[name];\n\n          var fieldOption = _extends({\n            name: name,\n            trigger: DEFAULT_TRIGGER,\n            valuePropName: 'value',\n            validate: []\n          }, usersFieldOption);\n\n          var rules = fieldOption.rules,\n              trigger = fieldOption.trigger,\n              _fieldOption$validate = fieldOption.validateTrigger,\n              validateTrigger = _fieldOption$validate === undefined ? trigger : _fieldOption$validate,\n              validate = fieldOption.validate;\n\n\n          var fieldMeta = this.fieldsStore.getFieldMeta(name);\n          if ('initialValue' in fieldOption) {\n            fieldMeta.initialValue = fieldOption.initialValue;\n          }\n\n          var inputProps = _extends({}, this.fieldsStore.getFieldValuePropValue(fieldOption));\n          var inputListeners = {};\n          var inputAttrs = {};\n          if (fieldNameProp) {\n            inputProps[fieldNameProp] = formName ? formName + '_' + name : name;\n          }\n\n          var validateRules = normalizeValidateRules(validate, rules, validateTrigger);\n          var validateTriggers = getValidateTriggers(validateRules);\n          validateTriggers.forEach(function (action) {\n            if (inputListeners[action]) return;\n            inputListeners[action] = _this3.getCacheBind(name, action, _this3.onCollectValidate);\n          });\n\n          // make sure that the value will be collect\n          if (trigger && validateTriggers.indexOf(trigger) === -1) {\n            inputListeners[trigger] = this.getCacheBind(name, trigger, this.onCollect);\n          }\n\n          var meta = _extends({}, fieldMeta, fieldOption, {\n            validate: validateRules\n          });\n          this.fieldsStore.setFieldMeta(name, meta);\n          if (fieldMetaProp) {\n            inputAttrs[fieldMetaProp] = meta;\n          }\n\n          if (fieldDataProp) {\n            inputAttrs[fieldDataProp] = this.fieldsStore.getField(name);\n          }\n          // This field is rendered, record it\n          this.renderFields[name] = true;\n          return {\n            props: omit(inputProps, ['id']),\n            // id: inputProps.id,\n            domProps: {\n              value: inputProps.value\n            },\n            attrs: _extends({}, inputAttrs, {\n              id: inputProps.id\n            }),\n            directives: [{\n              name: 'ant-ref',\n              value: this.getCacheBind(name, name + '__ref', this.saveRef)\n            }],\n            on: inputListeners\n          };\n        },\n        getFieldInstance: function getFieldInstance(name) {\n          return this.instances[name];\n        },\n        getRules: function getRules(fieldMeta, action) {\n          var actionRules = fieldMeta.validate.filter(function (item) {\n            return !action || item.trigger.indexOf(action) >= 0;\n          }).map(function (item) {\n            return item.rules;\n          });\n          return flattenArray(actionRules);\n        },\n        setFields: function setFields(maybeNestedFields, callback) {\n          var _this4 = this;\n\n          var fields = this.fieldsStore.flattenRegisteredFields(maybeNestedFields);\n          this.fieldsStore.setFields(fields);\n          if (onFieldsChange) {\n            var changedFields = Object.keys(fields).reduce(function (acc, name) {\n              return set(acc, name, _this4.fieldsStore.getField(name));\n            }, {});\n            onFieldsChange(this, changedFields, this.fieldsStore.getNestedAllFields());\n          }\n          if (templateContext) {\n            templateContext.$forceUpdate();\n          } else {\n            this.$forceUpdate();\n          }\n          this.$nextTick(function () {\n            callback && callback();\n          });\n        },\n        setFieldsValue: function setFieldsValue(changedValues, callback) {\n          var fieldsMeta = this.fieldsStore.fieldsMeta;\n\n          var values = this.fieldsStore.flattenRegisteredFields(changedValues);\n          var newFields = Object.keys(values).reduce(function (acc, name) {\n            var isRegistered = fieldsMeta[name];\n            if (process.env.NODE_ENV !== 'production') {\n              warning(isRegistered, 'Cannot use `setFieldsValue` until ' + 'you use `getFieldDecorator` or `getFieldProps` to register it.');\n            }\n            if (isRegistered) {\n              var value = values[name];\n              acc[name] = {\n                value: value\n              };\n            }\n            return acc;\n          }, {});\n          this.setFields(newFields, callback);\n          if (onValuesChange) {\n            var allValues = this.fieldsStore.getAllValues();\n            onValuesChange(this, changedValues, allValues);\n          }\n        },\n        saveRef: function saveRef(name, _, component) {\n          if (!component) {\n            var fieldMeta = this.fieldsStore.getFieldMeta(name);\n            if (!fieldMeta.preserve) {\n              // after destroy, delete data\n              this.clearedFieldMetaCache[name] = {\n                field: this.fieldsStore.getField(name),\n                meta: fieldMeta\n              };\n              this.clearField(name);\n            }\n            delete this.domFields[name];\n            return;\n          }\n          this.domFields[name] = true;\n          this.recoverClearedField(name);\n          // const fieldMeta = this.fieldsStore.getFieldMeta(name)\n          // if (fieldMeta) {\n          //   const ref = fieldMeta.ref\n          //   if (ref) {\n          //     if (typeof ref === 'string') {\n          //       throw new Error(`can not set ref string for ${name}`)\n          //     }\n          //     ref(component)\n          //   }\n          // }\n          this.instances[name] = component;\n        },\n        cleanUpUselessFields: function cleanUpUselessFields() {\n          var _this5 = this;\n\n          var fieldList = this.fieldsStore.getAllFieldsName();\n          var removedList = fieldList.filter(function (field) {\n            var fieldMeta = _this5.fieldsStore.getFieldMeta(field);\n            return !_this5.renderFields[field] && !_this5.domFields[field] && !fieldMeta.preserve;\n          });\n          if (removedList.length) {\n            removedList.forEach(this.clearField);\n          }\n          this.renderFields = {};\n        },\n        clearField: function clearField(name) {\n          this.fieldsStore.clearField(name);\n          delete this.instances[name];\n          delete this.cachedBind[name];\n        },\n        resetFields: function resetFields(ns) {\n          var _this6 = this;\n\n          var newFields = this.fieldsStore.resetFields(ns);\n          if (Object.keys(newFields).length > 0) {\n            this.setFields(newFields);\n          }\n          if (ns) {\n            var names = Array.isArray(ns) ? ns : [ns];\n            names.forEach(function (name) {\n              return delete _this6.clearedFieldMetaCache[name];\n            });\n          } else {\n            this.clearedFieldMetaCache = {};\n          }\n        },\n        recoverClearedField: function recoverClearedField(name) {\n          if (this.clearedFieldMetaCache[name]) {\n            this.fieldsStore.setFields(_defineProperty({}, name, this.clearedFieldMetaCache[name].field));\n            this.fieldsStore.setFieldMeta(name, this.clearedFieldMetaCache[name].meta);\n            delete this.clearedFieldMetaCache[name];\n          }\n        },\n        validateFieldsInternal: function validateFieldsInternal(fields, _ref, callback) {\n          var _this7 = this;\n\n          var fieldNames = _ref.fieldNames,\n              action = _ref.action,\n              _ref$options = _ref.options,\n              options = _ref$options === undefined ? {} : _ref$options;\n\n          var allRules = {};\n          var allValues = {};\n          var allFields = {};\n          var alreadyErrors = {};\n          fields.forEach(function (field) {\n            var name = field.name;\n            if (options.force !== true && field.dirty === false) {\n              if (field.errors) {\n                set(alreadyErrors, name, { errors: field.errors });\n              }\n              return;\n            }\n            var fieldMeta = _this7.fieldsStore.getFieldMeta(name);\n            var newField = _extends({}, field);\n            newField.errors = undefined;\n            newField.validating = true;\n            newField.dirty = true;\n            allRules[name] = _this7.getRules(fieldMeta, action);\n            allValues[name] = newField.value;\n            allFields[name] = newField;\n          });\n          this.setFields(allFields);\n          // in case normalize\n          Object.keys(allValues).forEach(function (f) {\n            allValues[f] = _this7.fieldsStore.getFieldValue(f);\n          });\n          if (callback && isEmptyObject(allFields)) {\n            callback(isEmptyObject(alreadyErrors) ? null : alreadyErrors, this.fieldsStore.getFieldsValue(fieldNames));\n            return;\n          }\n          var validator = new AsyncValidator(allRules);\n          if (validateMessages) {\n            validator.messages(validateMessages);\n          }\n          validator.validate(allValues, options, function (errors) {\n            var errorsGroup = _extends({}, alreadyErrors);\n            if (errors && errors.length) {\n              errors.forEach(function (e) {\n                var fieldName = e.field;\n                var field = get(errorsGroup, fieldName);\n                if ((typeof field === 'undefined' ? 'undefined' : _typeof(field)) !== 'object' || Array.isArray(field)) {\n                  set(errorsGroup, fieldName, { errors: [] });\n                }\n                var fieldErrors = get(errorsGroup, fieldName.concat('.errors'));\n                fieldErrors.push(e);\n              });\n            }\n            var expired = [];\n            var nowAllFields = {};\n            Object.keys(allRules).forEach(function (name) {\n              var fieldErrors = get(errorsGroup, name);\n              var nowField = _this7.fieldsStore.getField(name);\n              // avoid concurrency problems\n              if (nowField.value !== allValues[name]) {\n                expired.push({\n                  name: name\n                });\n              } else {\n                nowField.errors = fieldErrors && fieldErrors.errors;\n                nowField.value = allValues[name];\n                nowField.validating = false;\n                nowField.dirty = false;\n                nowAllFields[name] = nowField;\n              }\n            });\n            _this7.setFields(nowAllFields);\n            if (callback) {\n              if (expired.length) {\n                expired.forEach(function (_ref2) {\n                  var name = _ref2.name;\n\n                  var fieldErrors = [{\n                    message: name + ' need to revalidate',\n                    field: name\n                  }];\n                  set(errorsGroup, name, {\n                    expired: true,\n                    errors: fieldErrors\n                  });\n                });\n              }\n\n              callback(isEmptyObject(errorsGroup) ? null : errorsGroup, _this7.fieldsStore.getFieldsValue(fieldNames));\n            }\n          });\n        },\n        validateFields: function validateFields(ns, opt, cb) {\n          var _this8 = this;\n\n          var pending = new Promise(function (resolve, reject) {\n            var _getParams = getParams(ns, opt, cb),\n                names = _getParams.names,\n                options = _getParams.options;\n\n            var _getParams2 = getParams(ns, opt, cb),\n                callback = _getParams2.callback;\n\n            if (!callback || typeof callback === 'function') {\n              var oldCb = callback;\n              callback = function callback(errors, values) {\n                if (oldCb) {\n                  oldCb(errors, values);\n                } else if (errors) {\n                  reject({ errors: errors, values: values });\n                } else {\n                  resolve(values);\n                }\n              };\n            }\n            var fieldNames = names ? _this8.fieldsStore.getValidFieldsFullName(names) : _this8.fieldsStore.getValidFieldsName();\n            var fields = fieldNames.filter(function (name) {\n              var fieldMeta = _this8.fieldsStore.getFieldMeta(name);\n              return hasRules(fieldMeta.validate);\n            }).map(function (name) {\n              var field = _this8.fieldsStore.getField(name);\n              field.value = _this8.fieldsStore.getFieldValue(name);\n              return field;\n            });\n            if (!fields.length) {\n              if (callback) {\n                callback(null, _this8.fieldsStore.getFieldsValue(fieldNames));\n              }\n              return;\n            }\n            if (!('firstFields' in options)) {\n              options.firstFields = fieldNames.filter(function (name) {\n                var fieldMeta = _this8.fieldsStore.getFieldMeta(name);\n                return !!fieldMeta.validateFirst;\n              });\n            }\n            _this8.validateFieldsInternal(fields, {\n              fieldNames: fieldNames,\n              options: options\n            }, callback);\n          });\n          pending['catch'](function (e) {\n            if (console.error) {\n              console.error(e);\n            }\n            return e;\n          });\n          return pending;\n        },\n        isSubmitting: function isSubmitting() {\n          if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n            warning(false, '`isSubmitting` is deprecated. ' + \"Actually, it's more convenient to handle submitting status by yourself.\");\n          }\n          return this.submitting;\n        },\n        submit: function submit(callback) {\n          var _this9 = this;\n\n          if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n            warning(false, '`submit` is deprecated.' + \"Actually, it's more convenient to handle submitting status by yourself.\");\n          }\n          var fn = function fn() {\n            _this9.setState({\n              submitting: false\n            });\n          };\n          this.setState({\n            submitting: true\n          });\n          callback(fn);\n        }\n      },\n\n      render: function render() {\n        var h = arguments[0];\n        var $listeners = this.$listeners,\n            $slots = this.$slots;\n\n        var formProps = _defineProperty({}, formPropName, this.getForm());\n\n        var _getOptionProps = getOptionProps(this),\n            wrappedComponentRef = _getOptionProps.wrappedComponentRef,\n            restProps = _objectWithoutProperties(_getOptionProps, ['wrappedComponentRef']);\n\n        var wrappedComponentProps = {\n          props: mapProps.call(this, _extends({}, formProps, restProps)),\n          on: $listeners,\n          ref: 'WrappedComponent',\n          directives: [{\n            name: 'ant-ref',\n            value: wrappedComponentRef\n          }]\n        };\n\n        return WrappedComponent ? h(\n          WrappedComponent,\n          wrappedComponentProps,\n          [$slots['default']]\n        ) : null;\n      }\n    };\n    if (!WrappedComponent) return Form;\n    if (Array.isArray(WrappedComponent.props)) {\n      var newProps = {};\n      WrappedComponent.props.forEach(function (prop) {\n        newProps[prop] = PropTypes.any;\n      });\n      newProps[formPropName] = Object;\n      WrappedComponent.props = newProps;\n    } else {\n      WrappedComponent.props = WrappedComponent.props || {};\n      if (!(formPropName in WrappedComponent.props)) {\n        WrappedComponent.props[formPropName] = Object;\n      }\n    }\n    return argumentContainer(Form, WrappedComponent);\n  };\n}\n\nexport default createBaseForm;"],"sourceRoot":""}