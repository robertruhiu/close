{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-align/Align.js"],"names":["babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1___default","_util_vue_types__WEBPACK_IMPORTED_MODULE_2__","dom_align__WEBPACK_IMPORTED_MODULE_3__","_util_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_4__","_util__WEBPACK_IMPORTED_MODULE_5__","_util_vnode_js__WEBPACK_IMPORTED_MODULE_6__","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_7__","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_7___default","getElement","func","getPoint","point","__webpack_exports__","props","childrenProps","object","align","isRequired","target","oneOfType","def","window","monitorBufferTime","number","monitorWindowResize","bool","disabled","data","this","aligned","mounted","_this","$nextTick","prevProps","$props","forceAlign","startMonitorWindowResize","updated","_this2","reAlign","source","$el","sourceRect","getBoundingClientRect","lastElement","currentElement","lastPoint","currentPoint","Object","preRect","width","height","stopMonitorWindowResize","beforeDestroy","methods","resizeHandler","bufferMonitor","clear","remove","_$props","result","element","$listeners","render","child","$slots"],"mappings":"wHAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,QAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,QAAAM,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAAAW,EAAAX,EAAAE,EAAAQ,GASA,SAAAE,EAAAC,GACA,0BAAAA,KACAA,IADA,KAIA,SAAAC,EAAAC,GACA,MAA2D,YAA3D,qBAAAA,EAAA,YAAoDX,IAAOW,OAC3DA,EAD2D,KAI5CC,EAAA,MACfC,MAAA,CACAC,cAAmBb,EAAA,KAASc,OAC5BC,MAAWf,EAAA,KAASc,OAAAE,WACpBC,OAAYjB,EAAA,KAASkB,UAAA,CAAYlB,EAAA,KAASQ,KAAOR,EAAA,KAASc,SAAAK,IAAA,WAC1D,OAAAC,SAEAC,kBAAuBrB,EAAA,KAASsB,OAAAH,IAAA,IAChCI,oBAAyBvB,EAAA,KAASwB,KAAAL,KAAA,GAClCM,SAAczB,EAAA,KAASwB,KAAAL,KAAA,IAEvBO,KAAA,WAEA,OADAC,KAAAC,SAAA,EACA,IAEAC,QAAA,WACA,IAAAC,EAAAH,KAEAA,KAAAI,UAAA,WACAD,EAAAE,UAAwBpC,IAAQ,GAAGkC,EAAAG,QACnC,IAAArB,EAAAkB,EAAAG,QAEAH,EAAAF,SAAAE,EAAAI,cACAtB,EAAAa,UAAAb,EAAAW,qBACAO,EAAAK,8BAIAC,QAAA,WACA,IAAAC,EAAAV,KAEAA,KAAAI,UAAA,WACA,IAAAC,EAAAK,EAAAL,UACApB,EAAAyB,EAAAJ,OACAK,GAAA,EACA,IAAA1B,EAAAa,SAAA,CACA,IAAAc,EAAAF,EAAAG,IACAC,EAAAF,IAAAG,wBAAA,KAEA,GAAAV,EAAAP,SACAa,GAAA,MACS,CACT,IAAAK,EAAApC,EAAAyB,EAAAf,QACA2B,EAAArC,EAAAK,EAAAK,QACA4B,EAAApC,EAAAuB,EAAAf,QACA6B,EAAArC,EAAAG,EAAAK,QACc8B,OAAA5C,EAAA,KAAA4C,CAAQJ,IAAiBI,OAAA5C,EAAA,KAAA4C,CAAQH,GAE/CN,GAAA,GACWK,IAAAC,GACXD,IAAAC,GAAAE,GACAD,GAAAC,GAAAF,GACAE,IAA2BC,OAAA5C,EAAA,KAAA4C,CAAWF,EAAAC,MACtCR,GAAA,GAIA,IAAAU,EAAAX,EAAAI,YAAA,GACAH,IAAAC,GAAAS,EAAAC,QAAAR,EAAAQ,OAAAD,EAAAE,SAAAT,EAAAS,SACAZ,GAAA,GAGAD,EAAAI,aAGAH,GACAD,EAAAH,aAGAtB,EAAAW,sBAAAX,EAAAa,SACAY,EAAAF,2BAEAE,EAAAc,0BAEAd,EAAAL,UAAyBpC,IAAQ,GAAGyC,EAAAJ,OAAA,CAAkBlB,MAAQT,IAAS+B,EAAAJ,OAAAlB,YAGvEqC,cAAA,WACAzB,KAAAwB,2BAGAE,QAAA,CACAlB,yBAAA,WACAR,KAAA2B,gBACA3B,KAAA4B,cAA6BR,OAAA5C,EAAA,KAAA4C,CAAMpB,KAAAO,WAAAP,KAAAM,OAAAZ,mBACnCM,KAAA2B,cAA6BP,OAAA7C,EAAA,KAAA6C,CAAgB3B,OAAA,SAAAO,KAAA4B,iBAG7CJ,wBAAA,WACAxB,KAAA2B,gBACA3B,KAAA4B,cAAAC,QACA7B,KAAA2B,cAAAG,SACA9B,KAAA2B,cAAA,OAGApB,WAAA,WACA,IAAAwB,EAAA/B,KAAAM,OACAR,EAAAiC,EAAAjC,SACAR,EAAAyC,EAAAzC,OACAF,EAAA2C,EAAA3C,MAEA,IAAAU,GAAAR,EAAA,CACA,IAAAsB,EAAAZ,KAAAa,IAEAmB,OAAA,EACAC,EAAArD,EAAAU,GACAP,EAAAD,EAAAQ,GAEA2C,EACAD,EAAmBZ,OAAA9C,EAAA,KAAA8C,CAAYR,EAAAqB,EAAA7C,GACtBL,IACTiD,EAAmBZ,OAAA9C,EAAA,KAAA8C,CAAUR,EAAA7B,EAAAK,IAE7BY,KAAAC,SAAA,EACAD,KAAAkC,WAAA9C,OAAAY,KAAAkC,WAAA9C,MAAAwB,EAAAoB,MAKAG,OAAA,WACA,IAAAjD,EAAAc,KAAAM,OAAApB,cAEAkD,EAAApC,KAAAqC,OAAA,cACA,OAAAnD,EACakC,OAAA3C,EAAA,KAAA2C,CAAYgB,EAAA,CAASnD,MAAAC,IAElCkD","file":"js/chunk-vendors~585eaaa0.359b54f6.js","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport PropTypes from '../_util/vue-types';\nimport { alignElement, alignPoint } from 'dom-align';\nimport addEventListener from '../_util/Dom/addEventListener';\nimport { isWindow, buffer, isSamePoint } from './util';\nimport { cloneElement } from '../_util/vnode.js';\nimport clonedeep from 'lodash/cloneDeep';\n\nfunction getElement(func) {\n  if (typeof func !== 'function' || !func) return null;\n  return func();\n}\n\nfunction getPoint(point) {\n  if ((typeof point === 'undefined' ? 'undefined' : _typeof(point)) !== 'object' || !point) return null;\n  return point;\n}\n\nexport default {\n  props: {\n    childrenProps: PropTypes.object,\n    align: PropTypes.object.isRequired,\n    target: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).def(function () {\n      return window;\n    }),\n    monitorBufferTime: PropTypes.number.def(50),\n    monitorWindowResize: PropTypes.bool.def(false),\n    disabled: PropTypes.bool.def(false)\n  },\n  data: function data() {\n    this.aligned = false;\n    return {};\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.prevProps = _extends({}, _this.$props);\n      var props = _this.$props;\n      // if parent ref not attached .... use document.getElementById\n      !_this.aligned && _this.forceAlign();\n      if (!props.disabled && props.monitorWindowResize) {\n        _this.startMonitorWindowResize();\n      }\n    });\n  },\n  updated: function updated() {\n    var _this2 = this;\n\n    this.$nextTick(function () {\n      var prevProps = _this2.prevProps;\n      var props = _this2.$props;\n      var reAlign = false;\n      if (!props.disabled) {\n        var source = _this2.$el;\n        var sourceRect = source ? source.getBoundingClientRect() : null;\n\n        if (prevProps.disabled) {\n          reAlign = true;\n        } else {\n          var lastElement = getElement(prevProps.target);\n          var currentElement = getElement(props.target);\n          var lastPoint = getPoint(prevProps.target);\n          var currentPoint = getPoint(props.target);\n          if (isWindow(lastElement) && isWindow(currentElement)) {\n            // Skip if is window\n            reAlign = false;\n          } else if (lastElement !== currentElement || // Element change\n          lastElement && !currentElement && currentPoint || // Change from element to point\n          lastPoint && currentPoint && currentElement || // Change from point to element\n          currentPoint && !isSamePoint(lastPoint, currentPoint)) {\n            reAlign = true;\n          }\n\n          // If source element size changed\n          var preRect = _this2.sourceRect || {};\n          if (!reAlign && source && (preRect.width !== sourceRect.width || preRect.height !== sourceRect.height)) {\n            reAlign = true;\n          }\n        }\n        _this2.sourceRect = sourceRect;\n      }\n\n      if (reAlign) {\n        _this2.forceAlign();\n      }\n\n      if (props.monitorWindowResize && !props.disabled) {\n        _this2.startMonitorWindowResize();\n      } else {\n        _this2.stopMonitorWindowResize();\n      }\n      _this2.prevProps = _extends({}, _this2.$props, { align: clonedeep(_this2.$props.align) });\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopMonitorWindowResize();\n  },\n\n  methods: {\n    startMonitorWindowResize: function startMonitorWindowResize() {\n      if (!this.resizeHandler) {\n        this.bufferMonitor = buffer(this.forceAlign, this.$props.monitorBufferTime);\n        this.resizeHandler = addEventListener(window, 'resize', this.bufferMonitor);\n      }\n    },\n    stopMonitorWindowResize: function stopMonitorWindowResize() {\n      if (this.resizeHandler) {\n        this.bufferMonitor.clear();\n        this.resizeHandler.remove();\n        this.resizeHandler = null;\n      }\n    },\n    forceAlign: function forceAlign() {\n      var _$props = this.$props,\n          disabled = _$props.disabled,\n          target = _$props.target,\n          align = _$props.align;\n\n      if (!disabled && target) {\n        var source = this.$el;\n\n        var result = void 0;\n        var element = getElement(target);\n        var point = getPoint(target);\n\n        if (element) {\n          result = alignElement(source, element, align);\n        } else if (point) {\n          result = alignPoint(source, point, align);\n        }\n        this.aligned = true;\n        this.$listeners.align && this.$listeners.align(source, result);\n      }\n    }\n  },\n\n  render: function render() {\n    var childrenProps = this.$props.childrenProps;\n\n    var child = this.$slots['default'][0];\n    if (childrenProps) {\n      return cloneElement(child, { props: childrenProps });\n    }\n    return child;\n  }\n};"],"sourceRoot":""}