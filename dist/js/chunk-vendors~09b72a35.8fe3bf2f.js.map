{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/input/calculateNodeHeight.js"],"names":["__webpack_require__","d","__webpack_exports__","calculateNodeHeight","HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","hiddenTextarea","calculateNodeStyling","node","useCache","arguments","length","undefined","nodeRef","getAttribute","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","sizingStyle","map","name","join","nodeInfo","uiTextNode","minRows","maxRows","document","createElement","body","appendChild","setAttribute","removeAttribute","_calculateNodeStyling","value","placeholder","minHeight","Number","MIN_SAFE_INTEGER","maxHeight","MAX_SAFE_INTEGER","height","scrollHeight","overflowY","singleRowHeight","Math","max","min"],"mappings":"wHAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAMA,IAAAC,EAAA,iQAEAC,EAAA,2NAEAC,EAAA,GACAC,OAAA,EAEA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEAG,EAAAL,EAAAM,aAAA,OAAAN,EAAAM,aAAA,iBAAAN,EAAAM,aAAA,QAEA,GAAAL,GAAAJ,EAAAQ,GACA,OAAAR,EAAAQ,GAGA,IAAAE,EAAAC,OAAAC,iBAAAT,GAEAU,EAAAH,EAAAI,iBAAA,eAAAJ,EAAAI,iBAAA,oBAAAJ,EAAAI,iBAAA,sBAEAC,EAAAC,WAAAN,EAAAI,iBAAA,mBAAAE,WAAAN,EAAAI,iBAAA,gBAEAG,EAAAD,WAAAN,EAAAI,iBAAA,wBAAAE,WAAAN,EAAAI,iBAAA,qBAEAI,EAAAnB,EAAAoB,IAAA,SAAAC,GACA,OAAAA,EAAA,IAAAV,EAAAI,iBAAAM,KACGC,KAAA,KAEHC,EAAA,CACAJ,cACAH,cACAE,aACAJ,aAOA,OAJAT,GAAAI,IACAR,EAAAQ,GAAAc,GAGAA,EAGe,SAAAzB,EAAA0B,GACf,IAAAnB,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACAmB,EAAAnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QACAoB,EAAApB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QAEAJ,IACAA,EAAAyB,SAAAC,cAAA,YACAD,SAAAE,KAAAC,YAAA5B,IAKAsB,EAAAd,aAAA,QACAR,EAAA6B,aAAA,OAAAP,EAAAd,aAAA,SAEAR,EAAA8B,gBAAA,QAMA,IAAAC,EAAA9B,EAAAqB,EAAAnB,GACAW,EAAAiB,EAAAjB,YACAE,EAAAe,EAAAf,WACAJ,EAAAmB,EAAAnB,UACAK,EAAAc,EAAAd,YAOAjB,EAAA6B,aAAA,QAAAZ,EAAA,IAAuDpB,GACvDG,EAAAgC,MAAAV,EAAAU,OAAAV,EAAAW,aAAA,GAEA,IAAAC,EAAAC,OAAAC,iBACAC,EAAAF,OAAAG,iBACAC,EAAAvC,EAAAwC,aACAC,OAAA,EAUA,GARA,eAAA7B,EAEA2B,GAAAvB,EACG,gBAAAJ,IAEH2B,GAAAzB,GAGA,OAAAS,GAAA,OAAAC,EAAA,CAEAxB,EAAAgC,MAAA,IACA,IAAAU,EAAA1C,EAAAwC,aAAA1B,EACA,OAAAS,IACAW,EAAAQ,EAAAnB,EACA,eAAAX,IACAsB,IAAApB,EAAAE,GAEAuB,EAAAI,KAAAC,IAAAV,EAAAK,IAEA,OAAAf,IACAa,EAAAK,EAAAlB,EACA,eAAAZ,IACAyB,IAAAvB,EAAAE,GAEAyB,EAAAF,EAAAF,EAAA,YACAE,EAAAI,KAAAE,IAAAR,EAAAE,IAQA,OAHAf,IACAiB,EAAA,UAEA,CACAF,SAAA,KACAL,YAAA,KACAG,YAAA,KACAI","file":"js/chunk-vendors~09b72a35.8fe3bf2f.js","sourcesContent":["// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\n\nvar HIDDEN_TEXTAREA_STYLE = '\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\n\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\n\nvar computedStyleCache = {};\nvar hiddenTextarea = void 0;\n\nfunction calculateNodeStyling(node) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n\n  if (useCache && computedStyleCache[nodeRef]) {\n    return computedStyleCache[nodeRef];\n  }\n\n  var style = window.getComputedStyle(node);\n\n  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n\n  var sizingStyle = SIZING_STYLE.map(function (name) {\n    return name + ':' + style.getPropertyValue(name);\n  }).join(';');\n\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n\n  if (useCache && nodeRef) {\n    computedStyleCache[nodeRef] = nodeInfo;\n  }\n\n  return nodeInfo;\n}\n\nexport default function calculateNodeHeight(uiTextNode) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  // Fix wrap=\"off\" issue\n  // https://github.com/ant-design/ant-design/issues/6577\n  if (uiTextNode.getAttribute('wrap')) {\n    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n  } else {\n    hiddenTextarea.removeAttribute('wrap');\n  }\n\n  // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n      paddingSize = _calculateNodeStyling.paddingSize,\n      borderSize = _calculateNodeStyling.borderSize,\n      boxSizing = _calculateNodeStyling.boxSizing,\n      sizingStyle = _calculateNodeStyling.sizingStyle;\n\n  // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n\n  hiddenTextarea.setAttribute('style', sizingStyle + ';' + HIDDEN_TEXTAREA_STYLE);\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n\n  var minHeight = Number.MIN_SAFE_INTEGER;\n  var maxHeight = Number.MAX_SAFE_INTEGER;\n  var height = hiddenTextarea.scrollHeight;\n  var overflowY = void 0;\n\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height = height + borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height = height - paddingSize;\n  }\n\n  if (minRows !== null || maxRows !== null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = ' ';\n    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n    if (minRows !== null) {\n      minHeight = singleRowHeight * minRows;\n      if (boxSizing === 'border-box') {\n        minHeight = minHeight + paddingSize + borderSize;\n      }\n      height = Math.max(minHeight, height);\n    }\n    if (maxRows !== null) {\n      maxHeight = singleRowHeight * maxRows;\n      if (boxSizing === 'border-box') {\n        maxHeight = maxHeight + paddingSize + borderSize;\n      }\n      overflowY = height > maxHeight ? '' : 'hidden';\n      height = Math.min(maxHeight, height);\n    }\n  }\n  // Remove scroll bar flash when autosize without maxRows\n  // donot remove in vue\n  if (!maxRows) {\n    overflowY = 'hidden';\n  }\n  return {\n    height: height + 'px',\n    minHeight: minHeight + 'px',\n    maxHeight: maxHeight + 'px',\n    overflowY: overflowY\n  };\n}"],"sourceRoot":""}