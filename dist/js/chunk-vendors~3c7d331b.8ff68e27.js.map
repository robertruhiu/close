{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/dropdown/dropdown.js"],"names":["babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default","n","_vc_dropdown_src_index__WEBPACK_IMPORTED_MODULE_1__","_dropdown_button__WEBPACK_IMPORTED_MODULE_2__","_util_vue_types__WEBPACK_IMPORTED_MODULE_3__","_util_vnode__WEBPACK_IMPORTED_MODULE_4__","_util_props_util__WEBPACK_IMPORTED_MODULE_5__","_getDropdownProps__WEBPACK_IMPORTED_MODULE_6__","_icon__WEBPACK_IMPORTED_MODULE_7__","DropdownProps","Object","Dropdown","name","props","prefixCls","string","def","mouseEnterDelay","number","mouseLeaveDelay","placement","model","prop","event","provide","savePopupRef","this","inject","configProvider","default","methods","ref","popupRef","getTransitionName","_$props","$props","_$props$placement","undefined","transitionName","indexOf","render","h","arguments","$slots","$listeners","trigger","disabled","getPopupContainer","getContextPopupContainer","dropdownTrigger","class","overlay","overlayProps","_ref","_ref$selectable","selectable","_ref$focusable","focusable","expandIcon","attrs","type","fixedModeOverlay","componentOptions","mode","triggerActions","alignPoint","dropdownProps","on","slot","Button","__webpack_exports__"],"mappings":"wHAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,QAAAI,EAAAJ,EAAA,QAAAK,EAAAL,EAAA,QAAAM,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QASAU,EAAoBC,OAAAH,EAAA,KAAAG,GACpBC,EAAA,CACAC,KAAA,YACAC,MAASb,IAAQ,GAAGS,EAAA,CACpBK,UAAeV,EAAA,KAASW,OAAAC,IAAA,gBACxBC,gBAAqBb,EAAA,KAASc,OAAAF,IAAA,KAC9BG,gBAAqBf,EAAA,KAASc,OAAAF,IAAA,IAC9BI,UAAAX,EAAAW,UAAAJ,IAAA,gBAEAK,MAAA,CACAC,KAAA,UACAC,MAAA,iBAEAC,QAAA,WACA,OACAC,aAAAC,KAAAD,eAIAE,OAAA,CACAC,eAAA,CAAqBC,QAAA,WACrB,YAGAC,QAAA,CACAL,aAAA,SAAAM,GACAL,KAAAM,SAAAD,GAEAE,kBAAA,WACA,IAAAC,EAAAR,KAAAS,OACAC,EAAAF,EAAAd,UACAA,OAAAiB,IAAAD,EAAA,GAAAA,EACAE,EAAAJ,EAAAI,eAEA,YAAAD,IAAAC,EACAA,EAEAlB,EAAAmB,QAAA,UACA,aAEA,aAIAC,OAAA,WACA,IAAAC,EAAAC,UAAA,GACAC,EAAAjB,KAAAiB,OACAC,EAAAlB,KAAAkB,WAEA/B,EAAgBH,OAAAJ,EAAA,KAAAI,CAAcgB,MAC9BZ,EAAAD,EAAAC,UACA+B,EAAAhC,EAAAgC,QACAC,EAAAjC,EAAAiC,SACAC,EAAAlC,EAAAkC,kBACAC,EAAAtB,KAAAE,eAAAmB,kBAEAE,EAA0BvC,OAAAL,EAAA,KAAAK,CAAYiC,EAAA,YACtCO,MAAApC,EAAA,WACAgC,aAEAK,EAAAzB,KAAAyB,SAAAR,EAAAQ,SAAAR,EAAAQ,QAAA,GAGAC,EAAAD,GAAkCzC,OAAAJ,EAAA,KAAAI,CAAYyC,GAE9CE,EAAAD,GAAA,GACAE,EAAAD,EAAAE,WACAA,OAAAlB,IAAAiB,KACAE,EAAAH,EAAAI,UACAA,OAAApB,IAAAmB,KAEAE,EAAAjB,EACA,OACA,CAAOS,MAAApC,EAAA,uBACP,CAAA2B,EAASjC,EAAA,KAAI,CACbmD,MAAA,CAAgBC,KAAA,SAChBV,MAAApC,EAAA,+BAGA+C,EAAAV,KAAAW,iBAAiEpD,OAAAL,EAAA,KAAAK,CAAYyC,EAAA,CAC7EtC,MAAA,CACAkD,KAAA,WACAR,aACAE,YACAC,gBAEKP,EACLa,EAAAlB,EAAA,GAAAD,EACAoB,OAAA,EACAD,IAAA,IAAAA,EAAAzB,QAAA,iBACA0B,GAAA,GAEA,IAAAC,EAAA,CACArD,MAAab,IAAQ,CACrBiE,cACOpD,EAAA,CACPkC,qBAAAC,EACAV,eAAAZ,KAAAO,oBACAY,QAAAmB,IAEAG,GAAAvB,GAEA,OAAAH,EACMvC,EAAA,KACNgE,EACA,CAAAjB,EAAAR,EACA,WACA,CAAS2B,KAAA,WACT,CAAAP,QAMAlD,EAAA0D,OAAkBlE,EAAA,KACHmE,EAAA","file":"js/chunk-vendors~3c7d331b.8ff68e27.js","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport RcDropdown from '../vc-dropdown/src/index';\nimport DropdownButton from './dropdown-button';\nimport PropTypes from '../_util/vue-types';\nimport { cloneElement } from '../_util/vnode';\nimport { getOptionProps, getPropsData } from '../_util/props-util';\nimport getDropdownProps from './getDropdownProps';\nimport Icon from '../icon';\n\nvar DropdownProps = getDropdownProps();\nvar Dropdown = {\n  name: 'ADropdown',\n  props: _extends({}, DropdownProps, {\n    prefixCls: PropTypes.string.def('ant-dropdown'),\n    mouseEnterDelay: PropTypes.number.def(0.15),\n    mouseLeaveDelay: PropTypes.number.def(0.1),\n    placement: DropdownProps.placement.def('bottomLeft')\n  }),\n  model: {\n    prop: 'visible',\n    event: 'visibleChange'\n  },\n  provide: function provide() {\n    return {\n      savePopupRef: this.savePopupRef\n    };\n  },\n\n  inject: {\n    configProvider: { 'default': function _default() {\n        return {};\n      } }\n  },\n  methods: {\n    savePopupRef: function savePopupRef(ref) {\n      this.popupRef = ref;\n    },\n    getTransitionName: function getTransitionName() {\n      var _$props = this.$props,\n          _$props$placement = _$props.placement,\n          placement = _$props$placement === undefined ? '' : _$props$placement,\n          transitionName = _$props.transitionName;\n\n      if (transitionName !== undefined) {\n        return transitionName;\n      }\n      if (placement.indexOf('top') >= 0) {\n        return 'slide-down';\n      }\n      return 'slide-up';\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var $slots = this.$slots,\n        $listeners = this.$listeners;\n\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        trigger = props.trigger,\n        disabled = props.disabled,\n        getPopupContainer = props.getPopupContainer;\n    var getContextPopupContainer = this.configProvider.getPopupContainer;\n\n    var dropdownTrigger = cloneElement($slots['default'], {\n      'class': prefixCls + '-trigger',\n      disabled: disabled\n    });\n    var overlay = this.overlay || $slots.overlay && $slots.overlay[0];\n    // menu cannot be selectable in dropdown defaultly\n    // menu should be focusable in dropdown defaultly\n    var overlayProps = overlay && getPropsData(overlay);\n\n    var _ref = overlayProps || {},\n        _ref$selectable = _ref.selectable,\n        selectable = _ref$selectable === undefined ? false : _ref$selectable,\n        _ref$focusable = _ref.focusable,\n        focusable = _ref$focusable === undefined ? true : _ref$focusable;\n\n    var expandIcon = h(\n      'span',\n      { 'class': prefixCls + '-menu-submenu-arrow' },\n      [h(Icon, {\n        attrs: { type: 'right' },\n        'class': prefixCls + '-menu-submenu-arrow-icon' })]\n    );\n\n    var fixedModeOverlay = overlay && overlay.componentOptions ? cloneElement(overlay, {\n      props: {\n        mode: 'vertical',\n        selectable: selectable,\n        focusable: focusable,\n        expandIcon: expandIcon\n      }\n    }) : overlay;\n    var triggerActions = disabled ? [] : trigger;\n    var alignPoint = void 0;\n    if (triggerActions && triggerActions.indexOf('contextmenu') !== -1) {\n      alignPoint = true;\n    }\n    var dropdownProps = {\n      props: _extends({\n        alignPoint: alignPoint\n      }, props, {\n        getPopupContainer: getPopupContainer || getContextPopupContainer,\n        transitionName: this.getTransitionName(),\n        trigger: triggerActions\n      }),\n      on: $listeners\n    };\n    return h(\n      RcDropdown,\n      dropdownProps,\n      [dropdownTrigger, h(\n        'template',\n        { slot: 'overlay' },\n        [fixedModeOverlay]\n      )]\n    );\n  }\n};\n\nDropdown.Button = DropdownButton;\nexport default Dropdown;\nexport { DropdownProps };"],"sourceRoot":""}