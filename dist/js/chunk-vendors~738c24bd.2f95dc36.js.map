{"version":3,"sources":["webpack:///./node_modules/lodash/_memoizeCapped.js"],"names":["memoize","__webpack_require__","MAX_MEMOIZE_SIZE","memoizeCapped","func","result","key","cache","size","clear","module","exports"],"mappings":"6GAAA,IAAAA,EAAcC,EAAQ,QAGtBC,EAAA,IAUA,SAAAC,EAAAC,GACA,IAAAC,EAAAL,EAAAI,EAAA,SAAAE,GAIA,OAHAC,EAAAC,OAAAN,GACAK,EAAAE,QAEAH,IAGAC,EAAAF,EAAAE,MACA,OAAAF,EAGAK,EAAAC,QAAAR","file":"js/chunk-vendors~738c24bd.2f95dc36.js","sourcesContent":["var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"],"sourceRoot":""}