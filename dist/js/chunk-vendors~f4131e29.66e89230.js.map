{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/vc-table/src/ColumnManager.js"],"names":["babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default","babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__","babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default","ColumnManager","columns","this","_cached","key","value","_this","_cache","some","column","fixed","_this2","_this3","_this4","groupedColumns","filter","_this5","_this6","_leafColumns","_this7","leftColumns","_this8","rightColumns","_this9","_groupColumns","currentRow","arguments","length","undefined","parentColumn","rows","grouped","setRowSpan","rowSpan","children","forEach","index","newColumn","push","colSpan","i","name","fn","_this10","leafColumns","apply","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~f4131e29.66e89230.js","sourcesContent":["import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\n\nvar ColumnManager = function () {\n  function ColumnManager(columns) {\n    _classCallCheck(this, ColumnManager);\n\n    this.columns = columns;\n    this._cached = {};\n  }\n\n  _createClass(ColumnManager, [{\n    key: 'isAnyColumnsFixed',\n    value: function isAnyColumnsFixed() {\n      var _this = this;\n\n      return this._cache('isAnyColumnsFixed', function () {\n        return _this.columns.some(function (column) {\n          return !!column.fixed;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsLeftFixed',\n    value: function isAnyColumnsLeftFixed() {\n      var _this2 = this;\n\n      return this._cache('isAnyColumnsLeftFixed', function () {\n        return _this2.columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsRightFixed',\n    value: function isAnyColumnsRightFixed() {\n      var _this3 = this;\n\n      return this._cache('isAnyColumnsRightFixed', function () {\n        return _this3.columns.some(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leftColumns',\n    value: function leftColumns() {\n      var _this4 = this;\n\n      return this._cache('leftColumns', function () {\n        return _this4.groupedColumns().filter(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'rightColumns',\n    value: function rightColumns() {\n      var _this5 = this;\n\n      return this._cache('rightColumns', function () {\n        return _this5.groupedColumns().filter(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leafColumns',\n    value: function leafColumns() {\n      var _this6 = this;\n\n      return this._cache('leafColumns', function () {\n        return _this6._leafColumns(_this6.columns);\n      });\n    }\n  }, {\n    key: 'leftLeafColumns',\n    value: function leftLeafColumns() {\n      var _this7 = this;\n\n      return this._cache('leftLeafColumns', function () {\n        return _this7._leafColumns(_this7.leftColumns());\n      });\n    }\n  }, {\n    key: 'rightLeafColumns',\n    value: function rightLeafColumns() {\n      var _this8 = this;\n\n      return this._cache('rightLeafColumns', function () {\n        return _this8._leafColumns(_this8.rightColumns());\n      });\n    }\n\n    // add appropriate rowspan and colspan to column\n\n  }, {\n    key: 'groupedColumns',\n    value: function groupedColumns() {\n      var _this9 = this;\n\n      return this._cache('groupedColumns', function () {\n        var _groupColumns = function _groupColumns(columns) {\n          var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n          // track how many rows we got\n          rows[currentRow] = rows[currentRow] || [];\n          var grouped = [];\n          var setRowSpan = function setRowSpan(column) {\n            var rowSpan = rows.length - currentRow;\n            if (column && !column.children && // parent columns are supposed to be one row\n            rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n              column.rowSpan = rowSpan;\n            }\n          };\n          columns.forEach(function (column, index) {\n            var newColumn = _extends({}, column);\n            rows[currentRow].push(newColumn);\n            parentColumn.colSpan = parentColumn.colSpan || 0;\n            if (newColumn.children && newColumn.children.length > 0) {\n              newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n              parentColumn.colSpan += newColumn.colSpan;\n            } else {\n              parentColumn.colSpan++;\n            }\n            // update rowspan to all same row columns\n            for (var i = 0; i < rows[currentRow].length - 1; ++i) {\n              setRowSpan(rows[currentRow][i]);\n            }\n            // last column, update rowspan immediately\n            if (index + 1 === columns.length) {\n              setRowSpan(newColumn);\n            }\n            grouped.push(newColumn);\n          });\n          return grouped;\n        };\n        return _groupColumns(_this9.columns);\n      });\n    }\n  }, {\n    key: 'reset',\n    value: function reset(columns) {\n      this.columns = columns;\n      this._cached = {};\n    }\n  }, {\n    key: '_cache',\n    value: function _cache(name, fn) {\n      if (name in this._cached) {\n        return this._cached[name];\n      }\n      this._cached[name] = fn();\n      return this._cached[name];\n    }\n  }, {\n    key: '_leafColumns',\n    value: function _leafColumns(columns) {\n      var _this10 = this;\n\n      var leafColumns = [];\n      columns.forEach(function (column) {\n        if (!column.children) {\n          leafColumns.push(column);\n        } else {\n          leafColumns.push.apply(leafColumns, _toConsumableArray(_this10._leafColumns(column.children)));\n        }\n      });\n      return leafColumns;\n    }\n  }]);\n\n  return ColumnManager;\n}();\n\nexport default ColumnManager;"],"sourceRoot":""}