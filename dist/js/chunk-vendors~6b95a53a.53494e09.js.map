{"version":3,"sources":["webpack:///./node_modules/lodash/_baseClone.js"],"names":["Stack","__webpack_require__","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isArray","isBuffer","isMap","isObject","isSet","keys","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","isFlat","isFull","undefined","isArr","tag","isFunc","stacked","get","set","forEach","subValue","add","keysFunc","keysIn","props","module","exports"],"mappings":"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","file":"js/chunk-vendors~6b95a53a.53494e09.js","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"],"sourceRoot":""}