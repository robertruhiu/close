{"version":3,"sources":["webpack:///./node_modules/lodash/_baseFlatten.js"],"names":["arrayPush","__webpack_require__","isFlattenable","baseFlatten","array","depth","predicate","isStrict","result","index","length","value","module","exports"],"mappings":"6GAAA,IAAAA,EAAgBC,EAAQ,QACxBC,EAAoBD,EAAQ,QAa5B,SAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAA,EACAC,EAAAN,EAAAM,OAEAJ,MAAAJ,GACAM,MAAA,IAEA,QAAAC,EAAAC,EAAA,CACA,IAAAC,EAAAP,EAAAK,GACAJ,EAAA,GAAAC,EAAAK,GACAN,EAAA,EAEAF,EAAAQ,EAAAN,EAAA,EAAAC,EAAAC,EAAAC,GAEAR,EAAAQ,EAAAG,GAEKJ,IACLC,IAAAE,QAAAC,GAGA,OAAAH,EAGAI,EAAAC,QAAAV","file":"js/chunk-vendors~d0e958fd.5edcf01c.js","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"],"sourceRoot":""}