{"version":3,"sources":["webpack:///./node_modules/ant-design-vue/es/auto-complete/index.js"],"names":["babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default","n","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__","babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__","babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default","_vc_select__WEBPACK_IMPORTED_MODULE_3__","_vc_select__WEBPACK_IMPORTED_MODULE_4__","_select__WEBPACK_IMPORTED_MODULE_5__","_input__WEBPACK_IMPORTED_MODULE_6__","_InputElement__WEBPACK_IMPORTED_MODULE_7__","_util_vue_types__WEBPACK_IMPORTED_MODULE_8__","_util_props_util__WEBPACK_IMPORTED_MODULE_9__","AutoCompleteProps","Object","value","defaultValue","dataSource","array","optionLabelProp","String","dropdownMatchSelectWidth","bool","AutoComplete","name","props","prefixCls","string","def","showSearch","transitionName","choiceTransitionName","autoFocus","backfill","filterOption","oneOfType","func","defaultActiveFirstOption","Option","OptGroup","model","prop","event","provide","savePopupRef","this","methods","ref","popupRef","getInputElement","h","$createElement","$slots","children","element","length","focus","$refs","select","blur","render","_cls","arguments","size","$listeners","cls","options","childArray","map","item","key","text","Error","selectProps","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","notFoundContent","class","on","install","Vue","component","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~699ee098.0ace452a.js","sourcesContent":["import _typeof from 'babel-runtime/helpers/typeof';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport { Option, OptGroup } from '../vc-select';\nimport Select, { AbstractSelectProps, SelectValue } from '../select';\nimport Input from '../input';\nimport InputElement from './InputElement';\nimport PropTypes from '../_util/vue-types';\nimport { getComponentFromProp, getOptionProps, filterEmpty, isValidElement } from '../_util/props-util';\n\n// const DataSourceItemObject = PropTypes.shape({\n//   value: String,\n//   text: String,\n// }).loose\n// const DataSourceItemType = PropTypes.oneOfType([\n//   PropTypes.string,\n//   DataSourceItemObject,\n// ]).isRequired\n\n// export interface AutoCompleteInputProps {\n//   onChange?: React.FormEventHandler<any>;\n//   value: any;\n// }\n\nvar AutoCompleteProps = _extends({}, AbstractSelectProps(), {\n  value: SelectValue,\n  defaultValue: SelectValue,\n  dataSource: PropTypes.array,\n  optionLabelProp: String,\n  dropdownMatchSelectWidth: PropTypes.bool\n  // onChange?: (value: SelectValue) => void;\n  // onSelect?: (value: SelectValue, option: Object) => any;\n});\n\nvar AutoComplete = {\n  name: 'AAutoComplete',\n  props: _extends({}, AutoCompleteProps, {\n    prefixCls: PropTypes.string.def('ant-select'),\n    showSearch: PropTypes.bool.def(false),\n    transitionName: PropTypes.string.def('slide-up'),\n    choiceTransitionName: PropTypes.string.def('zoom'),\n    autoFocus: PropTypes.bool,\n    backfill: PropTypes.bool,\n    optionLabelProp: PropTypes.string.def('children'),\n    filterOption: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]).def(false),\n    defaultActiveFirstOption: PropTypes.bool.def(true)\n  }),\n  Option: _extends({}, Option, { name: 'AAutoCompleteOption' }),\n  OptGroup: _extends({}, OptGroup, { name: 'AAutoCompleteOptGroup' }),\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  provide: function provide() {\n    return {\n      savePopupRef: this.savePopupRef\n    };\n  },\n\n  methods: {\n    savePopupRef: function savePopupRef(ref) {\n      this.popupRef = ref;\n    },\n    getInputElement: function getInputElement() {\n      var h = this.$createElement;\n      var $slots = this.$slots;\n\n      var children = filterEmpty($slots['default']);\n      var element = children.length ? children[0] : h(Input);\n      return h(InputElement, [element]);\n    },\n    focus: function focus() {\n      if (this.$refs.select) {\n        this.$refs.select.focus();\n      }\n    },\n    blur: function blur() {\n      if (this.$refs.select) {\n        this.$refs.select.blur();\n      }\n    }\n  },\n\n  render: function render() {\n    var _cls;\n\n    var h = arguments[0];\n    var size = this.size,\n        prefixCls = this.prefixCls,\n        optionLabelProp = this.optionLabelProp,\n        dataSource = this.dataSource,\n        $slots = this.$slots,\n        $listeners = this.$listeners;\n\n\n    var cls = (_cls = {}, _defineProperty(_cls, prefixCls + '-lg', size === 'large'), _defineProperty(_cls, prefixCls + '-sm', size === 'small'), _defineProperty(_cls, prefixCls + '-show-search', true), _defineProperty(_cls, prefixCls + '-auto-complete', true), _cls);\n\n    var options = void 0;\n    var childArray = filterEmpty($slots.dataSource);\n    if (childArray.length) {\n      options = childArray;\n    } else {\n      options = dataSource ? dataSource.map(function (item) {\n        if (isValidElement(item)) {\n          return item;\n        }\n        switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {\n          case 'string':\n            return h(\n              Option,\n              { key: item },\n              [item]\n            );\n          case 'object':\n            return h(\n              Option,\n              { key: item.value },\n              [item.text]\n            );\n          default:\n            throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n        }\n      }) : [];\n    }\n    var selectProps = {\n      props: _extends({}, getOptionProps(this), {\n        mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n        optionLabelProp: optionLabelProp,\n        getInputElement: this.getInputElement,\n        notFoundContent: getComponentFromProp(this, 'notFoundContent')\n      }),\n      'class': cls,\n      ref: 'select',\n      on: $listeners\n    };\n    return h(\n      Select,\n      selectProps,\n      [options]\n    );\n  }\n};\n\n/* istanbul ignore next */\nAutoComplete.install = function (Vue) {\n  Vue.component(AutoComplete.name, AutoComplete);\n  Vue.component(AutoComplete.Option.name, AutoComplete.Option);\n  Vue.component(AutoComplete.OptGroup.name, AutoComplete.OptGroup);\n};\n\nexport default AutoComplete;"],"sourceRoot":""}