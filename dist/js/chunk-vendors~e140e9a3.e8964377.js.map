{"version":3,"sources":["webpack:///./node_modules/lodash/_baseIsEqualDeep.js"],"names":["Stack","__webpack_require__","equalArrays","equalByTag","equalObjects","getTag","isArray","isBuffer","isTypedArray","COMPARE_PARTIAL_FLAG","argsTag","arrayTag","objectTag","objectProto","Object","prototype","hasOwnProperty","baseIsEqualDeep","object","other","bitmask","customizer","equalFunc","stack","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","call","othIsWrapped","objUnwrapped","value","othUnwrapped","module","exports"],"mappings":"6GAAA,IAAAA,EAAYC,EAAQ,QACpBC,EAAkBD,EAAQ,QAC1BE,EAAiBF,EAAQ,QACzBG,EAAmBH,EAAQ,QAC3BI,EAAaJ,EAAQ,QACrBK,EAAcL,EAAQ,QACtBM,EAAeN,EAAQ,QACvBO,EAAmBP,EAAQ,QAG3BQ,EAAA,EAGAC,EAAA,qBACAC,EAAA,iBACAC,EAAA,kBAGAC,EAAAC,OAAAC,UAGAC,EAAAH,EAAAG,eAgBA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAlB,EAAAY,GACAO,EAAAnB,EAAAa,GACAO,EAAAF,EAAAb,EAAAN,EAAAa,GACAS,EAAAF,EAAAd,EAAAN,EAAAc,GAEAO,KAAAhB,EAAAE,EAAAc,EACAC,KAAAjB,EAAAE,EAAAe,EAEA,IAAAC,EAAAF,GAAAd,EACAiB,EAAAF,GAAAf,EACAkB,EAAAJ,GAAAC,EAEA,GAAAG,GAAAvB,EAAAW,GAAA,CACA,IAAAX,EAAAY,GACA,SAEAK,GAAA,EACAI,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADAL,MAAA,IAAAvB,GACAwB,GAAAhB,EAAAU,GACAhB,EAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACApB,EAAAe,EAAAC,EAAAO,EAAAN,EAAAC,EAAAC,EAAAC,GAEA,KAAAH,EAAAX,GAAA,CACA,IAAAsB,EAAAH,GAAAZ,EAAAgB,KAAAd,EAAA,eACAe,EAAAJ,GAAAb,EAAAgB,KAAAb,EAAA,eAEA,GAAAY,GAAAE,EAAA,CACA,IAAAC,EAAAH,EAAAb,EAAAiB,QAAAjB,EACAkB,EAAAH,EAAAd,EAAAgB,QAAAhB,EAGA,OADAI,MAAA,IAAAvB,GACAsB,EAAAY,EAAAE,EAAAhB,EAAAC,EAAAE,IAGA,QAAAO,IAGAP,MAAA,IAAAvB,GACAI,EAAAc,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAGAc,EAAAC,QAAArB","file":"js/chunk-vendors~e140e9a3.e8964377.js","sourcesContent":["var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"],"sourceRoot":""}