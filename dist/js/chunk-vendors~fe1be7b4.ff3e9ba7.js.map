{"version":3,"sources":["webpack:///./node_modules/axios/lib/helpers/spread.js"],"names":["module","exports","callback","arr","apply"],"mappings":"0HAsBAA,EAAAC,QAAA,SAAAC,GACA,gBAAAC,GACA,OAAAD,EAAAE,MAAA,KAAAD","file":"js/chunk-vendors~fe1be7b4.ff3e9ba7.js","sourcesContent":["'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n"],"sourceRoot":""}