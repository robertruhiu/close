{"version":3,"sources":["webpack:///./node_modules/lodash/omit.js"],"names":["arrayMap","__webpack_require__","baseClone","baseUnset","castPath","copyObject","customOmitClone","flatRest","getAllKeysIn","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","object","paths","result","isDeep","path","length","module","exports"],"mappings":"6GAAA,IAAAA,EAAeC,EAAQ,QACvBC,EAAgBD,EAAQ,QACxBE,EAAgBF,EAAQ,QACxBG,EAAeH,EAAQ,QACvBI,EAAiBJ,EAAQ,QACzBK,EAAsBL,EAAQ,QAC9BM,EAAeN,EAAQ,QACvBO,EAAmBP,EAAQ,QAG3BQ,EAAA,EACAC,EAAA,EACAC,EAAA,EAsBAC,EAAAL,EAAA,SAAAM,EAAAC,GACA,IAAAC,EAAA,GACA,SAAAF,EACA,OAAAE,EAEA,IAAAC,GAAA,EACAF,EAAAd,EAAAc,EAAA,SAAAG,GAGA,OAFAA,EAAAb,EAAAa,EAAAJ,GACAG,MAAAC,EAAAC,OAAA,GACAD,IAEAZ,EAAAQ,EAAAL,EAAAK,GAAAE,GACAC,IACAD,EAAAb,EAAAa,EAAAN,EAAAC,EAAAC,EAAAL,IAEA,IAAAY,EAAAJ,EAAAI,OACA,MAAAA,IACAf,EAAAY,EAAAD,EAAAI,IAEA,OAAAH,IAGAI,EAAAC,QAAAR","file":"js/chunk-vendors~8c6276cd.1f30a2ce.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n"],"sourceRoot":""}